{"meta":{"title":"chuddy's Blog","subtitle":"keep hungry keep foolish","description":null,"author":"chuddy","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"ssm-员工信息管理系统","slug":"ssm-员工信息管理系统","date":"2020-05-13T09:46:26.000Z","updated":"2020-06-03T09:52:39.713Z","comments":true,"path":"2020/05/13/ssm-员工信息管理系统/","link":"","permalink":"http://yoursite.com/2020/05/13/ssm-员工信息管理系统/","excerpt":"","text":"SSM-员工信息管理系统项目架构 jar包 配置文件1.web.xml &lt;?xml version=_&quot;1.0&quot;_ encoding=_&quot;UTF-8&quot;_?&gt; &lt;web-app xmlns:xsi=_&quot;http://www.w3.org/2001/XMLSchema-instance&quot;_ xmlns=_&quot;http://java.sun.com/xml/ns/javaee&quot;_ xsi:schemaLocation=_&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;_ id=_&quot;WebApp_ID&quot;_ version=_&quot;3.0&quot;_&gt; &lt;display-name&gt;emp&lt;/display-name&gt; &lt;listener&gt; &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;listener&gt; &lt;listener-class&gt; org.springframework.web.util.Log4jConfigListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;context-param&gt; &lt;!-- 加载src目录下的 applicationContext-*.xml文件--&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;servlet&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt; org.springframework.web.filter.CharacterEncodingFilter &lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;login.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;/web-app&gt; 2．applicationContext.xml &lt;?xml version=_&quot;1.0&quot;_ encoding=_&quot;UTF-8&quot;_?&gt; &lt;beans xmlns=_&quot;http://www.springframework.org/schema/beans&quot;_ xmlns:xsi=_&quot;http://www.w3.org/2001/XMLSchema-instance&quot;_ xmlns:p=_&quot;http://www.springframework.org/schema/p&quot;_ xmlns:context=_&quot;http://www.springframework.org/schema/context&quot;_ xmlns:tx=_&quot;http://www.springframework.org/schema/tx&quot;_ xsi:schemaLocation=_&quot;_ _http://www.springframework.org/schema/beans_ _http://www.springframework.org/schema/beans/spring-beans-4.0.xsd_ _http://www.springframework.org/schema/context_ _http://www.springframework.org/schema/context/spring-context-4.0.xsd_ _http://www.springframework.org/schema/tx_ _http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;_&gt; &lt;!-- 配置数据源 --&gt; &lt;bean id=_&quot;dataSource&quot;_ class=_&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;_&gt; &lt;property name=_&quot;driverClass&quot;_ value=_&quot;com.mysql.jdbc.Driver&quot;_ /&gt; &lt;property name=_&quot;jdbcUrl&quot;_ value=_&quot;jdbc:mysql://localhost:3306/employeemanage?characterEncoding=utf8&amp;serverTimezone=UTC&quot;_ /&gt; &lt;property name=_&quot;user&quot;_ value=_&quot;root&quot;_ /&gt; &lt;property name=_&quot;password&quot;_ value=_&quot;123456&quot;_ /&gt; &lt;/bean&gt; &lt;!--配置SqlSessionFactoryBean --&gt; &lt;bean id=_&quot;sqlSessionFactory&quot;_ class=_&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;_&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name=_&quot;dataSource&quot;_ ref=_&quot;dataSource&quot;_&gt;&lt;/property&gt; &lt;!-- 加载MyBatis配置文件 --&gt; &lt;property name=_&quot;configLocation&quot;_ value=_&quot;classpath:mybatis-config.xml&quot;_ /&gt; &lt;!-- 扫描Sql配置文件:Mapper需要的XML文件 --&gt; &lt;property name=_&quot;mapperLocations&quot;_ value=_&quot;classpath:com/dao/*.xml&quot;_ /&gt; &lt;/bean&gt; &lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt; &lt;bean class=_&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;_&gt; &lt;property name=_&quot;basePackage&quot;_ value=_&quot;com.dao&quot;_&gt;&lt;/property&gt; &lt;property name=_&quot;sqlSessionFactory&quot;_ ref=_&quot;sqlSessionFactory&quot;_&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 输出SQL语句 --&gt; &lt;bean id=_&quot;configuration&quot;_ class=_&quot;org.apache.ibatis.session.Configuration&quot;_&gt; &lt;property name=_&quot;logImpl&quot;_ value=_&quot;org.apache.ibatis.logging.stdout.StdOutImpl&quot;_/&gt; &lt;/bean&gt; &lt;!-- 配置事务管理器 --&gt; &lt;bean id=_&quot;transactionManager&quot;_ class=_&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;_&gt; &lt;property name=_&quot;dataSource&quot;_ ref=_&quot;dataSource&quot;_&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 配置声明式事务 --&gt; &lt;tx:annotation-driven transaction-manager=_&quot;transactionManager&quot;_ /&gt; &lt;/beans&gt; 3.springmvc.xml &lt;?xml version=_&quot;1.0&quot;_ encoding=_&quot;UTF-8&quot;_?&gt; &lt;beans xmlns=_&quot;http://www.springframework.org/schema/beans&quot;_ xmlns:xsi=_&quot;http://www.w3.org/2001/XMLSchema-instance&quot;_ xmlns:context=_&quot;http://www.springframework.org/schema/context&quot;_ xmlns:mvc=_&quot;http://www.springframework.org/schema/mvc&quot;_ xmlns:tx=_&quot;http://www.springframework.org/schema/tx&quot;_ xmlns:aop=_&quot;http://www.springframework.org/schema/aop&quot;_ xsi:schemaLocation=_&quot;http://www.springframework.org/schema/beans_ _http://www.springframework.org/schema/beans/spring-beans.xsd_ _http://www.springframework.org/schema/context_ _http://www.springframework.org/schema/context/spring-context-4.0.xsd_ _http://www.springframework.org/schema/mvc_ _http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;_&gt; &lt;!-- 配置扫描包 --&gt; &lt;context:component-scan base-package=_&quot;com&quot;_ /&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- 配置静态资源 --&gt; &lt;mvc:resources mapping=_&quot;/resources/**&quot;_ location=_&quot;/resources/&quot;_&gt;&lt;/mvc:resources&gt; &lt;!-- 配置视图解析器 --&gt; &lt;bean class=_&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;_&gt; &lt;!-- 配置jsp路径的前缀 --&gt; &lt;property name=_&quot;prefix&quot;_ value=_&quot;/&quot;_&gt;&lt;/property&gt; &lt;!-- 配置jsp路径的后缀 --&gt; &lt;property name=_&quot;suffix&quot;_ value=_&quot;.jsp&quot;_&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt; 4.mybatis-config.xml &lt;?xml version=_&quot;1.0&quot;_ encoding=_&quot;UTF-8&quot;_?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;!--基础配置 &lt;settings&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot; /&gt; &lt;/settings&gt; --&gt; &lt;/configuration&gt; controller层UserController.java package com.controller; import java.util.List; import javax.servlet.http.HttpServletRequest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import com.dao.UserDAO; import com.entity.Admin; import com.entity.User; import com.service.UserService; @Controller public class UserController { @Autowired private UserService userService; @Autowired private UserDAO userDAO; //登录 @RequestMapping(&quot;/login&quot;) public String login(HttpServletRequest req){ if(null!=userService.login(req.getParameter(&quot;username&quot;),req.getParameter(&quot;password&quot;))) { User[] list = userDAO.search(); req.setAttribute(&quot;alluserList&quot;,list); return &quot;redirect:select&quot;; } else return &quot;login&quot;; } //查询列表信息 @RequestMapping(&quot;/select&quot;) public String select(Model model) { model.addAttribute(&quot;alluserList&quot;, userService.search()); return &quot;alluserList&quot;; } //模糊查询 @RequestMapping(&quot;/selectByLike&quot;) public String select(String column,String keyword,Model model) { column=column==null?&quot;&quot;:column; keyword=keyword==null?&quot;&quot;:keyword; model.addAttribute(&quot;column&quot;,column ); model.addAttribute(&quot;keyword&quot;,keyword ); List&lt;User&gt; list = userDAO.selectByLike(column,keyword); model.addAttribute(&quot;alluserList&quot;,list); return &quot;alluserList&quot;; } //添加信息 @RequestMapping(&quot;/insert&quot;) public String insertUser(HttpServletRequest req,User user,Model model){ user.setId(user.getId()); user.setName(user.getName()); user.setBirthday(user.getBirthday()); user.setSex(user.getSex()); user.setProfession(user.getProfession()); user.setAdress(user.getAdress()); user.setMobile_phone(user.getMobile_phone()); System.out.println(user.toString()); String insert = userService.insertUser(user); req.setAttribute(&quot;insert&quot;,insert); model.addAttribute(&quot;alluserList&quot;, userService.search()); return &quot;alluserList&quot;; } //修改 @RequestMapping(&quot;/update&quot;) public String updateUser(HttpServletRequest req,User user){ String update = userService.updateUser(user); req.setAttribute(&quot;update&quot;,update); req.setAttribute(&quot;user&quot;,user); return &quot;update&quot;; } //edit @RequestMapping(&quot;/edit&quot;) public String edit(HttpServletRequest req,int id){ req.setAttribute(&quot;user&quot;,userService.get(id)); return &quot;update&quot;; } //edit1 @RequestMapping(&quot;/edit1&quot;) public String edit1(HttpServletRequest req,int id){ req.setAttribute(&quot;user&quot;,userService.get(id)); return &quot;delete&quot;; } //删除 @RequestMapping(&quot;/delete&quot;) public String deleteUser(HttpServletRequest req,User user) { user.setId(user.getId()); String delete = userService.deleteUser(user); req.setAttribute(&quot;delete&quot;, delete); req.setAttribute(&quot;user&quot;,user); return &quot;delete&quot;; } } dao层1.UserDAO.xml &lt;?xml version=_&quot;1.0&quot;_ encoding=_&quot;UTF-8&quot;_?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=_&quot;com.dao.UserDAO&quot;_&gt; &lt;!-- 查询列表信息 --&gt; &lt;select id=_&quot;search&quot;_ resultType=_&quot;com.entity.User&quot;_&gt; select * from employee1 &lt;/select&gt; &lt;!-- 登录 --&gt; &lt;select id=_&quot;selectAdmin&quot;_ resultType=_&quot;com.entity.Admin&quot;_&gt; select * from admin where username = #{username} &lt;/select&gt; &lt;!-- 模糊查询 --&gt; &lt;select id=_&quot;selectByLike&quot;_ resultType=_&quot;com.entity.User&quot;_&gt; select * from employee1 &lt;if test=_&quot;column!=&#39;&#39; and keyword !=&#39;&#39;&quot;_&gt; &lt;where&gt; ${column} like &#39;${keyword}%&#39; &lt;/where&gt; &lt;/if&gt; &lt;/select&gt; &lt;!-- 添加 --&gt; &lt;insert id=_&quot;insertUser&quot;_ parameterType=_&quot;com.entity.User&quot;_ &gt; insert into employee1 (id,name,birthday,sex,profession,adress,mobile_phone) values (#{id},#{name},#{birthday},#{sex},#{profession},#{adress},#{mobile_phone}) &lt;/insert&gt; &lt;!-- 修改 --&gt; &lt;update id=_&quot;updateUser&quot;_ parameterType=_&quot;com.entity.User&quot;_ &gt; update employee1 set name=#{name},birthday=#{birthday},sex=#{sex},profession=#{profession},adress=#{adress},mobile_phone=#{mobile_phone} where id=#{id} &lt;/update&gt; &lt;!-- 删除 --&gt; &lt;delete id=_&quot;deleteUser&quot;_ parameterType=_&quot;com.entity.User&quot;_&gt; delete from employee1 where id=#{id} &lt;/delete&gt; &lt;!-- 查询编号 --&gt; &lt;select id=_&quot;selectById&quot;_ resultType=_&quot;com.entity.User&quot;_&gt; select * from employee1 where id = #{id} &lt;/select&gt; &lt;/mapper&gt; 2.UserDAO.java package com.dao; import java.util.List; import org.apache.ibatis.annotations.Param; import com.entity.Admin; import com.entity.User; public interface UserDAO { //查询列表信息 public User[] search(); //登录 Admin selectAdmin(String username); //模糊查询 public List&lt;User&gt; selectByLike(@Param(&quot;column&quot;)String column,@Param(&quot;keyword&quot;)String keyword); //添加 int insertUser(User user); //修改 int updateUser(User user); //删除 int deleteUser(User user); public User selectById(int id); } 实体类1.用户登录 Admin.java **package** com.entity; **public** **class** Admin { **private**String username; **private**String password; **public** String getUsername() { **return** username; } **public** **void**setUsername(String username) { **this**.username= username; } **public** String getPassword() { **return** password; } **public** **void**setPassword(String password) { **this**.password= password; } } 2.员工信息列表 User.java **package** com.entity; **public** **class** User { **private**Integer id; **private**String name; **private**String birthday; **private**Integer sex; **private**String profession; **private**String adress; **private**String mobile_phone; **public** User(**int** id,String name,String birthday,**int** sex,String profession,String adress,String mobile_phone) { **super**(); **this**.id= id; **this**.name= name; **this**.birthday= birthday; **this**.sex= sex; **this**.profession= profession; **this**.adress= adress; **this**.mobile_phone= mobile_phone; } **public** User() { **super**(); } **public** **int** getId() { **return** id; } **public** **void**setId(Integer id) { **this**.id= id; } **public** String getName() { **return** name; } **public** **void**setName(String name) { **this**.name= name; } **public** String getBirthday() { **return** birthday; } **public** **void**setBirthday(String birthday) { **this**.birthday= birthday; } **public** Integer getSex() { **return** sex; } **public** **void**setSex(Integer sex) { **this**.sex= sex; } **public** String getProfession() { **return** profession; } **public** **void**setProfession(String profession) { **this**.profession= profession; } **public** String getAdress() { **return** adress; } **public** **void**setAdress(String adress) { **this**.adress= adress; } **public** String getMobile_phone() { **return** mobile_phone; } **public** **void**setMobile_phone(String mobile_phone) { **this**.mobile_phone= mobile_phone; } @Override **public** String toString() { **return** &quot;MyUser [id=&quot;+id+&quot;,name=&quot;+name+&quot;,birthday=&quot;+birthday+&quot;,sex=&quot;+sex+&quot;,profession=&quot;+profession+&quot;,adress=&quot;+adress+&quot;,mobile_phone=&quot;+mobile_phone+&quot;]&quot;; } } service层1.UserService.java package com.service; import java.util.List; import com.entity.Admin; import com.entity.User; public interface UserService { //查询列表信息 public User[] search(); //模糊查询 public List&lt;User&gt; selectByLike(String column,String keyword); //登录 Admin login(String username,String password); //添加 String insertUser(User user); //修改 String updateUser(User user); //删除 String deleteUser(User user); public User get(int id); } 2.UserServiceImpl.java package com.service; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.dao.UserDAO; import com.entity.Admin; import com.entity.User; @Service public class UserServiceImpl implements UserService { @Autowired private UserDAO userDAO; //查询列表信息 @Override public User[] search() { return userDAO.search(); } //登录 public Admin login(String username,String password) { Admin admin = userDAO.selectAdmin(username); if(admin !=null &amp;&amp; admin.getPassword().equals(password)) { return admin; } return null; } //模糊查询 @Override public List&lt;User&gt; selectByLike(String column,String keyword){ return userDAO.selectByLike(column,keyword); } //添加 @Override public String insertUser(User user) { System.out.println(&quot;service++++++++++&quot;); int i = userDAO.insertUser(user); String message=&quot;&quot;; if(i&gt;0) { message=&quot;添加成功&quot;; }else { message=&quot;添加失败&quot;; } return message; } //修改 @Override public String updateUser(User user) { int i = userDAO.updateUser(user); String message=&quot;&quot;; if(i&gt;0) { message=&quot;修改成功&quot;; }else { message=&quot;修改失败&quot;; } return message; } //删除 @Override public String deleteUser(User user) { int i = userDAO.deleteUser(user); String message=&quot;&quot;; if(i&gt;0) { message=&quot;删除成功&quot;; }else { message=&quot;删除失败&quot;; } return message; } @Override public User get(int id) { return userDAO.selectById(id); } } 前端页面1.login.jsp &lt;%@ page language=_&quot;java&quot;_ contentType=_&quot;text/html; charset=UTF-8&quot;_ pageEncoding=_&quot;UTF-8&quot;_%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=_&quot;Content-Type&quot;_ content=_&quot;text/html; charset=UTF-8&quot;_&gt; &lt;title&gt;登录界面&lt;/title&gt; &lt;style&gt; **body**{text-align:_center_;} **span**{font-size:_200%_} **hr**{margin-bottom:_30px_} &lt;/style&gt; &lt;/head&gt; &lt;script type=_&quot;text/javascript&quot;_&gt; **function** checkUser(){ **if**(document.login.username.value==&quot;&quot;){ alert(&quot;用户名不能为空！&quot;); }**else** **if**(document.login.password.value==&quot;&quot;){ alert(&quot;密码不能为空！&quot;); } } &lt;/script&gt; &lt;body&gt; &lt;span&gt;登录&lt;/span&gt; &lt;form name=_&quot;login&quot;_ action=_&quot;_${pageContext.request.contextPath }_/login&quot;_ method=_&quot;post&quot;_&gt; &lt;table style=&quot;margin-top:_5%_&quot; align=_&quot;center&quot;_&gt; &lt;tr&gt; &lt;td&gt;用户名:&lt;/td&gt; &lt;td&gt;&lt;input id=_&quot;username&quot;_ name=_&quot;username&quot;_ type=_&quot;text&quot;_/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码:&lt;/td&gt; &lt;td&gt;&lt;input id=_&quot;password&quot;_ name=_&quot;password&quot;_ type=_&quot;password&quot;_/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input style=&quot;width: _56px_&quot; type=_&quot;submit&quot;_ value=_&quot;登录&quot;_ onclick=&quot;return checkUser()&quot;/&gt;&lt;/td&gt; &lt;td align=_&quot;right&quot;_&gt;&lt;input type=_&quot;reset&quot;_ style=&quot;width: _56px_;height: _24px_&quot; value=_&quot;重置&quot;_ /&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 2.alluserList.jsp &lt;%@ page language=_&quot;java&quot;_ contentType=_&quot;text/html; charset=UTF-8&quot;_ pageEncoding=_&quot;UTF-8&quot;_%&gt; &lt;%@ page isELIgnored=_&quot;false&quot;_%&gt; &lt;%@ taglib prefix=_&quot;c&quot;_ uri=_&quot;http://java.sun.com/jsp/jstl/core&quot;_%&gt; &lt;%@ taglib prefix=_&quot;fmt&quot;_ uri=_&quot;http://java.sun.com/jsp/jstl/fmt&quot;_%&gt; &lt;%@ taglib prefix=_&quot;fn&quot;_ uri=_&quot;http://java.sun.com/jsp/jstl/functions&quot;_%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=_&quot;Content-Type&quot;_ content=_&quot;text/html; charset=UTF-8&quot;_&gt; &lt;title&gt;列表首页&lt;/title&gt;&lt;/head&gt; &lt;% // 字段長度/手機號/數據類型（數字/中文）%&gt; &lt;body&gt; &lt;form id=_&quot;se&quot;_ action=_&quot;_${pageContext.request.contextPath }_/selectByLike&quot;_ method=_&quot;post&quot;_&gt; 查询：&lt;Select name=_&quot;column&quot;_ id=_&quot;column&quot;_&gt; &lt;Option value=_&quot;id&quot;_ &lt;c:if test=&quot;${column **eq** &#39;id&#39;}&quot;&gt;selected&lt;/c:if&gt;&gt;编号 &lt;/Option&gt; &lt;Option value=_&quot;name&quot;_ &lt;c:if test=&quot;${column **eq** &#39;name&#39;}&quot;&gt;selected&lt;/c:if&gt;&gt;姓名&lt;/Option&gt; &lt;option value=_&quot;mobile_phone&quot;_ &lt;c:if test=&quot;${column **eq** &#39;mobile_phone&#39;}&quot;&gt;selected&lt;/c:if&gt;&gt;手机号&lt;/option&gt; &lt;/Select&gt; &lt;input type=_&quot;text&quot;_ id=_&quot;keyword&quot;_ name=_&quot;keyword&quot;_ value=_&quot;_${keyword}_&quot;_ placeholder=_&quot;请输入查询内容&quot;_/&gt; &lt;input type=_&quot;button&quot;_ value=_&quot;查询&quot;_ onclick=&quot;fValidate()&quot;/&gt; &lt;/form&gt; &lt;script&gt; **function** fValidate(){ **var** cColumn =document.getElementById(&quot;column&quot;);// 根据ID获取对象cColumn.value某对象的值 **var** keyword =document.getElementById(&quot;keyword&quot;); **if**(cColumn.value == &quot;id&quot;){ // 验证编号 **var** r = /^[0-9]+.?[0-9]*$/ **if**(!r.test(keyword.value)){ alert(&quot;请输入数字编号！&quot;); **return** **false**; } }**else** **if**(cColumn.value == &quot;name&quot;){ // 验证姓名 **var** reg=/^[\\u0391-\\uFFE5]+$/; **if**(cColumn.value!=&quot;&quot;&amp;&amp;!reg.test(cColumn.value)){ alert(&#39;必须输入中文！&#39;); **return** **false**; } }**else** **if**(cColumn.value == &quot;mobile_phone&quot;){ // 验证手机号 **if**(keyword.value.length==0) { alert(&#39;手机号码不能为空！&#39;); **return** **false**; } **if**(keyword.value.length!=11) { alert(&#39;请输入有效的手机号码，需是11位！&#39;); **return** **false**; } **var** myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\\d{8})$/; **if**(!myreg.test(keyword.value)) { alert(&#39;请输入有效的手机号码！&#39;); **return** **false**; } } document.forms[0].submit(); } **function** setcok(w){ docunment.cookie = &quot;keyword=&quot; + escape(w.keyword.value)+&quot;;expires=Fri,31 Dec 2020 23:59:59 GMT;&quot;; **return** **true**; } &lt;/script&gt; &lt;script&gt; /*function getCookie(sname){ var aCookie = document.cookie.split(&quot;;&quot;); for(var i=0;i&lt;aCookie.length;i++){ var aCrumb = aCookie[i].split(&quot;=&quot;); if(sname == aCrumb[0]) return unescape(aCrumb[1]); } return&quot;&quot;; }*/ //document.getElementById(&#39;se&#39;).keyword.value=getCookie(&#39;keyword&#39;); &lt;/script&gt; &lt;table border=_&quot;1&quot;_ &gt; &lt;thead &gt; &lt;tr&gt; &lt;form action=_&quot;insert.jsp&quot;_ method=_&quot;post&quot;_&gt; &lt;td&gt;&lt;input type=_&quot;submit&quot;_ value=_&quot;添加&quot;_/&gt;&lt;/td&gt; &lt;/form&gt; &lt;!-- &lt;form action=&quot;${pageContext.request.contextPath }/selectall&quot; method=&quot;post&quot;&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;查询所有用户&quot;&gt;&lt;/td&gt; &lt;/form&gt; --&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th width=_&quot;60px&quot;_&gt;序号&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;姓名&lt;/th&gt; &lt;th width=_&quot;100px&quot;_&gt;生日&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;性别&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;职业&lt;/th&gt; &lt;th width=_&quot;120px&quot;_&gt;地址&lt;/th&gt; &lt;th width=_&quot;100px&quot;_&gt;手机&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;修改&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;删除&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=_&quot;_${alluserList }_&quot;_ var=_&quot;user&quot;_&gt; &lt;tr&gt; &lt;td&gt;${user.id }&lt;/td&gt; &lt;td&gt;${user.name }&lt;/td&gt; &lt;td&gt;${user.birthday}&lt;/td&gt; &lt;td&gt;&lt;c:if test=_&quot;_${user.sex==0}_&quot;_&gt;男&lt;/c:if&gt;&lt;c:if test=_&quot;_${user.sex==1}_&quot;_&gt;女&lt;/c:if&gt;&lt;/td&gt; &lt;td&gt;${user.profession }&lt;/td&gt; &lt;td&gt;${user.adress }&lt;/td&gt; &lt;td&gt;${user.mobile_phone }&lt;/td&gt; &lt;td&gt;&lt;a href=_&quot;edit.action?id=_${user.id}_&quot;_&gt;修改&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=_&quot;edit1.action?id=_${user.id} _&quot;_&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; 3.insert.jsp &lt;%@ page language=_&quot;java&quot;_ contentType=_&quot;text/html; charset=UTF-8&quot;_ pageEncoding=_&quot;UTF-8&quot;_%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=_&quot;Content-Type&quot;_ content=_&quot;text/html; charset=UTF-8&quot;_&gt; &lt;title&gt;添加员工信息&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;h2&gt;添加员工信息&lt;/h2&gt; &lt;form action=_&quot;_${pageContext.request.contextPath }_/insert&quot;_ method=_&quot;post&quot;_ style=&quot;cneter&quot;&gt; 编号：&lt;input type=_&quot;text&quot;_ name=_&quot;id&quot;_ placeholder=_&quot;请输入数字编号&quot;_ onblur=&quot;checkId(this.value)&quot;/&gt;&lt;br&gt;&lt;br&gt; &lt;script type=_&quot;text/javascript&quot;_&gt; **function** checkId(id){ **var** r = /^[0-9]+.?[0-9]*$/ **if**(id.length==0) { alert(&#39;编号不能为空！&#39;); **return** **false**; } **if**(id!=&quot;&quot; &amp;&amp; r.test(id)){ **return** **true**; }**else**{ **return** **false**; alert(&quot;请输入数字编号！&quot;); } } &lt;/script&gt; 姓名：&lt;input type=_&quot;text&quot;_ name=_&quot;name&quot;_ onblur=&quot;isChinese(this.value)&quot; placeholder=_&quot;请输入中文！&quot;_/&gt;&lt;br&gt;&lt;br&gt; &lt;script language=_&quot;javascript&quot;_&gt; **function** isChinese(obj){ **if**(obj.length==0) { alert(&#39;姓名/职业/住所不能为空！&#39;); **return** **false**; } **var** reg=/^[\\u0391-\\uFFE5]+$/; **if**(obj!=&quot;&quot;&amp;&amp;!reg.test(obj)){ alert(&#39;请输入中文！&#39;); **return** **false**; } } &lt;/script&gt; 生日：&lt;input type=_&quot;text&quot;_ name=_&quot;birthday&quot;_ onblur=&quot;checkBirth(this.value)&quot; placeholder=_&quot;格式为：1999.01.01&quot;_/&gt;&lt;br&gt;&lt;br&gt; &lt;script type=_&quot;text/javascript&quot;_&gt; **function** checkBirth(o){ **var** reg= /^([1-9]\\d{3}).(\\d{2}).(\\d{2})$/ **if**(o.length==0) { alert(&#39;生日不能为空！&#39;); **return** **false**; } **if**(o!=&quot;&quot; &amp;&amp; reg.test(o)){ **return** **true**; }**else**{ **return** **false**; alert(&quot;请输入格式为：1999.01.01 ！&quot;); } } &lt;/script&gt; 性别：&lt;select name=_&quot;sex&quot;_ &gt; &lt;option value=_&quot;0&quot;_&gt;男&lt;/option&gt; &lt;option value=_&quot;1&quot;_&gt;女&lt;/option&gt; &lt;/select&gt; &lt;br&gt;&lt;br&gt; 职业：&lt;input type=_&quot;text&quot;_ name=_&quot;profession&quot;_ onblur=&quot;isChinese(this.value)&quot; placeholder=_&quot;请输入中文！&quot;_/&gt;&lt;br&gt;&lt;br&gt; 住所：&lt;input type=_&quot;text&quot;_ name=_&quot;adress&quot;_ onblur=&quot;isChinese(this.value)&quot; placeholder=_&quot;请输入中文！&quot;_/&gt;&lt;br&gt;&lt;br&gt; 手机：&lt;input type=_&quot;text&quot;_ name=_&quot;mobile_phone&quot;_ onblur=&quot;checkPhone(this.value)&quot; placeholder=_&quot;请输入11位数字！&quot;_/&gt;&lt;br&gt;&lt;br&gt; &lt;script type=_&quot;text/javascript&quot;_&gt; **function** checkPhone(mobile) { **if**(mobile.length==0) { alert(&#39;手机号码不能为空！&#39;); **return** **false**; } **if**(mobile.length!=11) { alert(&#39;请输入有效的手机号码，需是11位！&#39;); **return** **false**; } **var** myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\\d{8})$/; **if**(!myreg.test(mobile)) { alert(&#39;请输入有效的手机号码！&#39;); **return** **false**; } } &lt;/script&gt; &lt;input type=_&quot;submit&quot;_ value=_&quot; 添加 &quot;_ /&gt; &lt;input type=_&quot;reset&quot;_ value=_&quot; 重置 &quot;_ /&gt; &lt;/form&gt; &lt;/center&gt; &lt;/body&gt; &lt;/html&gt; 4.delete.jsp &lt;%@ page language=_&quot;java&quot;_ contentType=_&quot;text/html; charset=UTF-8&quot;_ pageEncoding=_&quot;UTF-8&quot;_%&gt; &lt;%@ taglib prefix=_&quot;c&quot;_ uri=_&quot;http://java.sun.com/jsp/jstl/core&quot;_ %&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=_&quot;Content-Type&quot;_ content=_&quot;text/html; charset=UTF-8&quot;_&gt; &lt;title&gt;删除&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;form action=_&quot;_${pageContext.request.contextPath }_/delete&quot;_ method=_&quot;post&quot;_&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=_&quot;60px&quot;_&gt;序号&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;姓名&lt;/th&gt; &lt;th width=_&quot;100px&quot;_&gt;生日&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;性别&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;职业&lt;/th&gt; &lt;th width=_&quot;120px&quot;_&gt;地址&lt;/th&gt; &lt;th width=_&quot;100px&quot;_&gt;手机&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;修改&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;id&quot;_ id=_&quot;id&quot;_ value=_&quot;_${user.id }_&quot;_ readonly=_&quot;readonly&quot;_&gt;${user.id }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;name&quot;_ id=_&quot;name&quot;_ value=_&quot;_${user.name }_&quot;_&gt;${user.name }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;birthday&quot;_ id=_&quot;birthday&quot;_ value=_&quot;_${user.birthday }_&quot;_&gt;${user.birthday }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;sex&quot;_ id=_&quot;sex&quot;_ value=_&quot;_${user.sex }_&quot;_&gt;${user.sex }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;profession&quot;_ id=_&quot;profession&quot;_ value=_&quot;_${user.profession }_&quot;_&gt;${user.profession }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;adress&quot;_ id=_&quot;adress&quot;_ value=_&quot;_${user.adress }_&quot;_&gt;${user.adress }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;mobile_phone&quot;_ id=_&quot;mobile_phone&quot;_ value=_&quot;_${user.mobile_phone }_&quot;_&gt;${user.mobile_phone }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;submit&quot;_ id=_&quot;delete&quot;_ value=_&quot;删除&quot;_/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; ${delete} &lt;a href=_&quot;_${pageContext.request.contextPath }_/select&quot;_&gt;返回&lt;/a&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 5.update.jsp &lt;%@ page language=_&quot;java&quot;_ contentType=_&quot;text/html; charset=UTF-8&quot;_ pageEncoding=_&quot;UTF-8&quot;_%&gt; &lt;%@ taglib prefix=_&quot;c&quot;_ uri=_&quot;http://java.sun.com/jsp/jstl/core&quot;_ %&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=_&quot;Content-Type&quot;_ content=_&quot;text/html; charset=UTF-8&quot;_&gt; &lt;title&gt;修改&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;form action=_&quot;_${pageContext.request.contextPath }_/update&quot;_ method=_&quot;post&quot;_&gt; ${update} &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=_&quot;60px&quot;_&gt;序号&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;姓名&lt;/th&gt; &lt;th width=_&quot;100px&quot;_&gt;生日&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;性别&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;职业&lt;/th&gt; &lt;th width=_&quot;120px&quot;_&gt;地址&lt;/th&gt; &lt;th width=_&quot;100px&quot;_&gt;手机&lt;/th&gt; &lt;th width=_&quot;60px&quot;_&gt;修改&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=_&quot;hidden&quot;_ name=_&quot;id&quot;_ id=_&quot;id&quot;_ value=_&quot;_${user.id }_&quot;_ readonly=_&quot;readonly&quot;_&gt;${user.id }&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;text&quot;_ name=_&quot;name&quot;_ id=_&quot;name&quot;_ value=_&quot;_${user.name }_&quot;_ onblur=&quot;isChinese(this.value)&quot; placeholder=_&quot;请输入中文！&quot;_&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;text&quot;_ name=_&quot;birthday&quot;_ id=_&quot;birthday&quot;_ value=_&quot;_${user.birthday }_&quot;_ onblur=&quot;checkBirth(this.value)&quot; placeholder=_&quot;格式为：1999.01.01&quot;_&gt;&lt;/td&gt; &lt;td&gt;&lt;select name=_&quot;sex&quot;_ &gt; &lt;option value=_&quot;0&quot;_ &lt;c:if test=&quot;${user.sex ==0}&quot;&gt;selected&lt;/c:if&gt;&gt;男&lt;/option&gt; &lt;option value=_&quot;1&quot;_ &lt;c:if test=&quot;${user.sex ==1}&quot;&gt;selected&lt;/c:if&gt;&gt;女&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;text&quot;_ name=_&quot;profession&quot;_ id=_&quot;profession&quot;_ value=_&quot;_${user.profession }_&quot;_ onblur=&quot;isChinese(this.value)&quot; placeholder=_&quot;请输入中文！&quot;_&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;text&quot;_ name=_&quot;adress&quot;_ id=_&quot;adress&quot;_ value=_&quot;_${user.adress }_&quot;_ onblur=&quot;isChinese(this.value)&quot; placeholder=_&quot;请输入中文！&quot;_&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;text&quot;_ name=_&quot;mobile_phone&quot;_ id=_&quot;mobile_phone&quot;_ value=_&quot;_${user.mobile_phone }_&quot;_ onblur=&quot;checkPhone(this.value)&quot; placeholder=_&quot;请输入11位数字！&quot;_&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=_&quot;submit&quot;_ id=_&quot;update&quot;_ value=_&quot;修改&quot;_/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;a href=_&quot;_${pageContext.request.contextPath }_/select&quot;_&gt;返回&lt;/a&gt; &lt;/form&gt; &lt;script language=_&quot;javascript&quot;_&gt; **function** isChinese(obj){ **if**(obj.length==0) { alert(&#39;姓名/职业/住所不能为空！&#39;); **return** **false**; } **var** reg=/^[\\u0391-\\uFFE5]+$/; **if**(obj!=&quot;&quot;&amp;&amp;!reg.test(obj)){ alert(&#39;请输入中文！&#39;); **return** **false**; } } &lt;/script&gt; &lt;script type=_&quot;text/javascript&quot;_&gt; **function** checkBirth(o){ **var** reg= /^([1-9]\\d{3}).(\\d{2}).(\\d{2})$/ **if**(o.length==0) { alert(&#39;生日不能为空！&#39;); **return** **false**; } **if**(o!=&quot;&quot; &amp;&amp; reg.test(o)){ **return** **true**; }**else**{ **return** **false**; alert(&quot;请输入格式为：1999.01.01 ！&quot;); } } &lt;/script&gt; &lt;script type=_&quot;text/javascript&quot;_&gt; **function** checkPhone(mobile) { **if**(mobile.length==0) { alert(&#39;手机号码不能为空！&#39;); **return** **false**; } **if**(mobile.length!=11) { alert(&#39;请输入有效的手机号码，需是11位！&#39;); **return** **false**; } **var** myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\\d{8})$/; **if**(!myreg.test(mobile)) { alert(&#39;请输入有效的手机号码！&#39;); **return** **false**; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[],"tags":[]},{"title":"JS表单验证","slug":"JS表单验证","date":"2020-05-01T09:20:07.000Z","updated":"2020-06-03T09:52:58.121Z","comments":true,"path":"2020/05/01/JS表单验证/","link":"","permalink":"http://yoursite.com/2020/05/01/JS表单验证/","excerpt":"","text":"JS表单验证(长度/数字/汉字/邮箱/手机号等限制)英文字母&lt;script type=&quot;text/javascript&quot;&gt; //验证只能是字母 function checkZm(zm){ var zmReg=/^[a-zA-Z]*$/; if(zm!=&quot;&quot;&amp;&amp;!zmReg.test(zm)){ alert(&quot;只能是英文字母！&quot;); return false; } } &lt;/script&gt; 汉字&lt;input type=&quot;text&quot; onblur=&quot;isChinese(this.value)&quot; placeholder=&quot;请输入中文！&quot; /&gt; &lt;script language=&quot;javascript&quot;&gt; function isChinese(obj){ var reg=/^[\\u0391-\\uFFE5]+$/; if(obj!=&quot;&quot;&amp;&amp;!reg.test(obj)){ alert(&#39;必须输入中文！&#39;); return false; } } &lt;/script&gt; 数字&lt;script language=javascript&gt; //验证只能为数字 function checkNumber(obj){ var reg = /^[0-9]+$/; if(obj!=&quot;&quot;&amp;&amp;!reg.test(obj)){ alert(&#39;只能输入数字！&#39;); return false; } } &lt;/script&gt; 时间&lt;script type=&quot;text/javascript&quot;&gt; //检验时间大小(与当前时间比较) function checkDate(obj){ var obj_value=obj.replace(/-/g,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#39;2009-12-10&#39;) // var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#39;2010-12-10 11:12&#39;) var date1=new Date(Date.parse(obj_value)); var date2=new Date();//取今天的日期 if(date1&gt;date2){ alert(&quot;不能大于当前时间！&quot;); return false; } } &lt;/script&gt; 空值&lt;script language=&quot;javascript&quot;&gt; function CheckForm(obj) { if (obj.length == 0) { alert(&quot;姓名不能为空!&quot;); return false; } return true; alert(&quot;姓名不能为空!&quot;); } &lt;/script&gt; 邮箱&lt;script language=&quot;javascript&quot;&gt; function test(obj){ //对电子邮件的验证 var myreg = /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/; if(!myreg.test(obj)) { alert(&#39;请输入有效的邮箱！&#39;); return false; } } &lt;/script&gt; 手机号&lt;script type=&quot;text/javascript&quot;&gt; function validatemobile(mobile) { if(mobile.length==0) { alert(&#39;手机号码不能为空！&#39;); return false; } if(mobile.length!=11) { alert(&#39;请输入有效的手机号码，需是11位！&#39;); return false; } var myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\\d{8})$/; if(!myreg.test(mobile)) { alert(&#39;请输入有效的手机号码！&#39;); return false; } } &lt;/script&gt; 身份证号&lt;script type=&quot;text/javascript&quot;&gt; // 构造函数，变量为15位或者18位的身份证号码 function clsIDCard(CardNo) { this.Valid=false; this.ID15=&#39;&#39;; this.ID18=&#39;&#39;; this.Local=&#39;&#39;; if(CardNo!=null)this.SetCardNo(CardNo); } // 设置身份证号码，15位或者18位 clsIDCard.prototype.SetCardNo = function(CardNo) { this.ID15=&#39;&#39;; this.ID18=&#39;&#39;; this.Local=&#39;&#39;; CardNo=CardNo.replace(&quot; &quot;,&quot;&quot;); var strCardNo; if(CardNo.length==18) { pattern= /^\\d{17}(\\d|x|X)$/; if (pattern.exec(CardNo)==null)return; strCardNo=CardNo.toUpperCase(); } else { pattern= /^\\d{15}$/; if (pattern.exec(CardNo)==null)return; strCardNo=CardNo.substr(0,6)+&#39;19&#39;+CardNo.substr(6,9) strCardNo+=this.GetVCode(strCardNo); } this.Valid=this.CheckValid(strCardNo); } // 校验身份证有效性 clsIDCard.prototype.IsValid = function() { return this.Valid; } // 返回生日字符串，格式如下，1981-10-10 clsIDCard.prototype.GetBirthDate = function() { var BirthDate=&#39;&#39;; if(this.Valid)BirthDate=this.GetBirthYear()+&#39;-&#39;+this.GetBirthMonth()+&#39;-&#39;+this.GetBirthDay(); return BirthDate; } // 返回生日中的年，格式如下，1981 clsIDCard.prototype.GetBirthYear = function() { var BirthYear=&#39;&#39;; if(this.Valid)BirthYear=this.ID18.substr(6,4); return BirthYear; } // 返回生日中的月，格式如下，10 clsIDCard.prototype.GetBirthMonth = function() { var BirthMonth=&#39;&#39;; if(this.Valid)BirthMonth=this.ID18.substr(10,2); if(BirthMonth.charAt(0)==&#39;0&#39;)BirthMonth=BirthMonth.charAt(1); return BirthMonth; } // 返回生日中的日，格式如下，10 clsIDCard.prototype.GetBirthDay = function() { var BirthDay=&#39;&#39;; if(this.Valid)BirthDay=this.ID18.substr(12,2); return BirthDay; } // 返回性别，1：男，0：女 clsIDCard.prototype.GetSex = function() { var Sex=&#39;&#39;; if(this.Valid)Sex=this.ID18.charAt(16)%2; return Sex; } // 返回15位身份证号码 clsIDCard.prototype.Get15 = function() { var ID15=&#39;&#39;; if(this.Valid)ID15=this.ID15; return ID15; } // 返回18位身份证号码 clsIDCard.prototype.Get18 = function() { var ID18=&#39;&#39;; if(this.Valid)ID18=this.ID18; return ID18; } // 返回所在省，例如：上海市、浙江省 clsIDCard.prototype.GetLocal = function() { var Local=&#39;&#39;; if(this.Valid)Local=this.Local; return Local; } clsIDCard.prototype.GetVCode = function(CardNo17) { var Wi = new Array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2,1); var Ai = new Array(&#39;1&#39;,&#39;0&#39;,&#39;X&#39;,&#39;9&#39;,&#39;8&#39;,&#39;7&#39;,&#39;6&#39;,&#39;5&#39;,&#39;4&#39;,&#39;3&#39;,&#39;2&#39;); var cardNoSum = 0; for (var i=0; i&lt;CardNo17.length; i++)cardNoSum+=CardNo17.charAt(i)*Wi[i]; var seq = cardNoSum%11; return Ai[seq]; } clsIDCard.prototype.CheckValid = function(CardNo18) { if(this.GetVCode(CardNo18.substr(0,17))!=CardNo18.charAt(17))return false; if(!this.IsDate(CardNo18.substr(6,8)))return false; var aCity={11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江 &quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,42:&quot;湖北 &quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏 &quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外&quot;}; if(aCity[parseInt(CardNo18.substr(0,2))]==null)return false; this.ID18=CardNo18; this.ID15=CardNo18.substr(0,6)+CardNo18.substr(8,9); this.Local=aCity[parseInt(CardNo18.substr(0,2))]; return true; } clsIDCard.prototype.IsDate = function(strDate) { var r = strDate.match(/^(\\d{1,4})(\\d{1,2})(\\d{1,2})$/); if(r==null)return false; var d= new Date(r[1], r[2]-1, r[3]); return (d.getFullYear()==r[1]&amp;&amp;(d.getMonth()+1)==r[2]&amp;&amp;d.getDate()==r[3]); } function valiIdCard(idCard){ var checkFlag = new clsIDCard(idCard); if (!checkFlag.IsValid()) { alert(&quot;输入的身份证号无效,请输入真实的身份证号！&quot;); document.getElementByIdx(&quot;idCard&quot;).focus(); return false; }else{ alert(&quot;是有效身份证！&quot;); } } &lt;/script&gt;","categories":[],"tags":[]},{"title":"jsp页面中，如何获取输入的内容，保持在文本框中，不清空","slug":"jsp页面中，如何获取输入的内容，保持在文本框中，不清空","date":"2020-04-29T09:17:54.000Z","updated":"2020-06-03T09:53:31.040Z","comments":true,"path":"2020/04/29/jsp页面中，如何获取输入的内容，保持在文本框中，不清空/","link":"","permalink":"http://yoursite.com/2020/04/29/jsp页面中，如何获取输入的内容，保持在文本框中，不清空/","excerpt":"","text":"在网上看了一下，清楚的回答不多。这里先肯定的说一下，用cookie. 下面给一个例子，也是从网上找到的，我试过了，成功。可供参考： &lt;form id=&quot;ftop&quot; action=&quot;check&quot; name=&quot;ftop&quot; method=&quot;post&quot; &gt; &lt;input id=&quot;in1&quot; type=&quot;text&quot; name=&quot;param1&quot; value=&quot;&quot;&gt;&lt;/input&gt; &lt;input class=&quot;btn&quot; id=&quot;b_tn&quot;type=&quot;submit&quot; value=&quot;搜索&quot; /&gt; 这是一段简单的代码。如果要获取输入的内容，可以写成： &lt;form id=&quot;ftop&quot; action=&quot;check&quot; name=&quot;ftop&quot; method=&quot;post&quot; οnsubmit=&quot;javascript:return setcok(this);&quot;&gt; &lt;input id=&quot;in1&quot; type=&quot;text&quot; name=&quot;param1&quot; value=&quot;&quot;&gt;&lt;/input&gt; &lt;input class=&quot;btn&quot; id=&quot;b_tn&quot;type=&quot;submit&quot; value=&quot;搜索&quot; /&gt; &lt;/form&gt; &lt;script language=&quot;javascript&quot;&gt; function setcok(o){ document.cookie = &quot;param1=&quot; + escape(o.param1.value) + &quot;; expires=Fri, 31 Dec 2020 23:59:59 GMT;&quot;; return true; } &lt;/script&gt; 上面的是存,下面的是取和回写到文本框 &lt;script language=&quot;javascript&quot;&gt; function GetCookie(sName){ var aCookie = document.cookie.split(&quot;; &quot;); for (var i=0; i &lt; aCookie.length; i++){ var aCrumb = aCookie[i].split(&quot;=&quot;); if (sName == aCrumb[0]) return unescape(aCrumb[1]); } return &#39;&#39;; } document.getElementById(&#39;ftop&#39;).param1.value=GetCookie(&#39;param1&#39;); &lt;/script&gt; 而关于cookie相关的内容，也推荐一个地址，大家可以去了解下： http://www.cnblogs.com/baixiaoxu/news/2009/07/14/2023929.html","categories":[],"tags":[]},{"title":"Eclipse开发JavaWeb项目配置Tomcat","slug":"Eclipse开发JavaWeb项目配置Tomcat","date":"2020-03-01T09:12:22.000Z","updated":"2020-06-03T09:54:05.579Z","comments":true,"path":"2020/03/01/Eclipse开发JavaWeb项目配置Tomcat/","link":"","permalink":"http://yoursite.com/2020/03/01/Eclipse开发JavaWeb项目配置Tomcat/","excerpt":"","text":"原文链接 首先介绍eclipse开发JavaWeb项目需要配置的相关环境，使用tomcat软件在本地搭建服务器，然后再在eclipse环境下配置tomcat： 第一步：使用tomcat软件在本地搭建服务器，这个本地的tomcat服务器与eclipse环境下配置tomcat服务器都可以使用，但是只能启动一个，否则会报端口冲突，到时安装好环境会介绍 tomcat软件是apache旗下的一个开源项目。软件下载链接：http://tomcat.apache.org/，如图，我选择的是7.0的环境，并且选择的安装板，不需要配置相关的环境变量，zip版各种环境变量配置麻烦死了，这些个环境软件会在我的结束语中给一个下载地址，也可以根据自己的环境需求下载需要的版本 安装版教程链接可参考：(https://wenku.baidu.com/view/869562cd58f5f61fb736668f.html) 网上也有很多安装教程链接，介绍下安装成功之后，在计算机管理-应用中就可以看到tomcat的服务如图第三个图标： 打开该图标出现如下窗口： 该窗口中有一个start按钮，点击start按钮，tomcat本地服务器就开启了，点击stop按钮，服务就关闭了 只有在服务开启的情况下，在浏览器中输入http://localhost:8080 进入如下页面表示安装成功。 这里本地tomcat安装成功了。 第二步：eclipse环境下如何配置tomcat服务器： 打开Eclipse，单击“Window”菜单，选择下方的“Preferences”，看是否存在“Server”选项，我目前使用的是eclipse版，不带额外插件，一些使用的Myeclipse集成了J2EE可以忽略此过程。我使用的EclipsePreferences下是没有Server选项，此时需要安装server插件，我的上一篇博客介绍了如何安装server插件，我这里就不详细叙述了，安装了server之后；如图 上图中，点击“add”的添加按钮，弹出如下界面： 上图中，选择对应的Tomcat版本，点击next，如图： 上图中，选择Tomcat的路径，以及JRE（使用工作平台默认的，不用做额外添加修改），点击“完成”，配置完毕。 第三步：建立一个web项目 File → New → Dynamic Web Project ，一路next，在该窗口时如图，勾选Gernerate web.xml deployment descriptor ，finish 就ok了 让tomcat服务器显示在控制台上，将web应用部署到tomcat中，Window → Show View → Servers如图 点击链接No servers are available. Click ths link to create a new server. ，在弹出的对话框中选择Tomcat版本 如图： 点击“Next”，添加我们的项目 如图：，点击finish 返回eclipse控制台下方的“Servers”面板，右键单击该面板中的“Tomcat v7.0 Server at localhost”节点，在弹出的快捷菜单中单击“Start”，即可启动指定的Web服务器，这里要说明一下就是：很重要，尤其对于不懂的初学者，我也是搞了很久查资料才弄明白，在快捷菜单中单击“Start”启动Web服务器时，弹出如图窗口： 这个是由于你开启了本地tomcat服务器，又开启eclipse集成的tomcat服务器，引起端口冲突，可以先关掉本地tomcat服务器，如图点击stop之后 在操作快捷菜单中单击“Start”启动Web服务器就不会有端口冲突窗口出现了，控制台出现如下提示就ok啦。 测试下，建立一个jsp文件放在webcontent目录下，如图，关于javaweb项目结构，以及建立jsp文件中文乱码就不详细叙述了，网上文档太多了，如图： 随便运行一个jsp文件，右键——&gt;Run As ——&gt;Run on Server, 效果如图：整个过程就ok了 再看下一个细节： 看下一 根据前面的介绍，上图表明，我们新建的项目已经部署到Tomcat服务器上去了，也就是看到了javaweb这个工程发布出去了，双击“Tomcat v7.0 Server at localhost”节点，出现如图信息 上图的红框部分表明，服务的部署是在eclipse里面（默认是放在工作空间里的.metadata文件夹下），而不是在Tomcat里面。我们来改一下，前提是工程并没有发布到Tomcat中去，那我们先把之前发布的版本删了吧（稍后重新发布）： 这时再次双击“Tomcat v7.0 Server at localhost”节点，使用Tomcat的安装目录作为部署的位置，并修改部署的路径Deploy path（建议改成Tomcat的webapps目录下），然后保存即可。 这时，重新运行程序。现在来到Tomcat的webapps目录下，发现多了一个javaweb文件夹（即工程文件名），并且文件夹下包含了工程文件中WebContent的内容： 上图说明，说明这才是真正将程序发布到服务器上。 我们再来到Tomcat的work目录中，看一下编译之后的文件： 上图表明，Tomcat会先将jsp文件转为java文件，然后再把java文件编译为class文件，最终执行的是class文件。现在来看一下JSP运行的原理。 到这里总结以下：上面的整个过程，让我们学会了如何配置Tomcat和部署工程文件，明白了jsp文件是怎样发布到服务器上并最终显示出来。关于JSP的进一步学习可以参考网上的教程自学","categories":[],"tags":[]},{"title":"Eclipse配置maven环境","slug":"Eclipse配置maven环境","date":"2020-02-24T09:10:56.000Z","updated":"2020-06-03T09:54:19.019Z","comments":true,"path":"2020/02/24/Eclipse配置maven环境/","link":"","permalink":"http://yoursite.com/2020/02/24/Eclipse配置maven环境/","excerpt":"","text":"Eclipse配置maven环境参考链接 一.什么是maven? Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。当你使用Maven的时候，你用一个明确定义的项目对象模型来描述你的项目，然后Maven可以应用横切的逻辑，这些逻辑来自一组共享的（或者自定义的）插件。 Maven 有一个生命周期，当你运行 mvn install 的时候被调用。这条命令告诉 Maven 执行一系列的有序的步骤，直到到达你指定的生命周期。遍历生命周期旅途中的一个影响就是，Maven 运行了许多默认的插件目标，这些目标完成了像编译和创建一个 JAR 文件这样的工作。 ** 一个jar包,会有两种下载的方式。一种是直接下载压缩包，一种是提供maven下载路径。Maven最方便的就是能帮我们下载jar包。告别传统手动导包的方式。** 二.maven仓库 maven中有中央仓库，本地仓库，私服三个概念 1.中央仓库是maven给你提供的所有jar包的下载地址.网址：http://mvnrepository.com/ 2.本地仓库是你在中央仓库里下载好的jia包所保存的文件夹。 **3.私服相当于一个大型的本地仓库，一般在规模庞大的公司里才会有自己的私服。为什么会有私服呢？ 有些公司在上班过程中某些电脑是不允许连接互联网的，只能使用自己公司的局域网，那么，这个时候你要使用maven的话就不能使用http的地址，这个时候就产生了私服。**私服**通过maven的索引使用公司的ip地址来使用到maven中的jar包。中国拥有最厉害的私服公司就是马云的阿里巴巴。但是阿里巴巴的私服会对外开放。** **三.Eclipse配置maven **官网:**http://maven.apache.org/** **1.解压你在maven下载到的压缩包，一般把它和jdk放在一起。** **2.安装maven在电脑上** **鼠标右键点击计算机&gt;点击属性&gt;点击高级系统设置之后会弹出** ** ** **然后再点击环境变量会弹出：** ** ** 这个时候你就可以点击新建配置maven_home,注意maven_home的变量值是你maven的压缩包的解压地址。 ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101150627498-1690868876.png) 配置完maven_home之后记得还需要修改path ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101151137310-1742259396.png) 在path的变量值最后加上%MAVEN_HOME%\\bin;但是在配置maven_home时，你得保证你的环境变量里面存在JAVA_HOME（配置jdk)。没有配置JAVA_HOME测试时会报错。做完这些后，你就可以测试你的maven有没有安装成功。打开cmd，输入mvn -v如果你出现的是： ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101151850482-628183323.png) 那么恭喜你，你安装成功了。但是这只是成功的第一步，你还需要在你的Eclipse上安装maven。 3.在Eclipse上安装maven 打开Eclipse点击window&gt;prferences之后会弹出 ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101153146201-1619143316.png) ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101153604576-2057741024.png) 点击确定之后会出现： ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101153819560-983249693.png) 点击finish之后： ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101155206451-1041304297.png) 这个时候你就把maven装在你的Eclipse中了，但是我们知道，maven是一个方便我们管理jar包的工具，我们需要用到的jar包都是从maven的中央仓库里下载的，但是我们不需要每次都需要去本地仓库里下载，当我们下载过一次之后就可以在我们的本地仓库中导入jar包，那么，怎么连接本地仓库呢？ 4.连接本地仓库 第一步：你首先需要找到你的maven解压文件夹，然后打开conf子文件夹，然后编辑settings.xml 第二步：回到eclipse中点击window再点击preferences ![](https://images2017.cnblogs.com/blog/1196650/201711/1196650-20171101160920951-1995380760.png) 配置完以上步骤之后，恭喜你，可以在maven环境下建立project啦~","categories":[],"tags":[]},{"title":"eclipse配置环境变量","slug":"eclipse配置环境变量","date":"2019-12-26T09:03:15.000Z","updated":"2020-06-03T09:08:33.532Z","comments":true,"path":"2019/12/26/eclipse配置环境变量/","link":"","permalink":"http://yoursite.com/2019/12/26/eclipse配置环境变量/","excerpt":"","text":"eclipse配置环境变量下载JDK:http://www.oracle.com/technetwork/java/javase/downloads/index.html 3、配置环境变量：右击“我的电脑”–&gt;”属性”–&gt;”高级”–&gt;”环境变量”(win10系统略有差异) 如下图可以看到2个框，分别是用户变量（只针对当前用户）和系统变量（用这个系统的都可以） 对于我们来说设置哪个都行，方式配置也都一样，一般都是设置系统变量，我不小心设置成了用户变量，不过设置内容和操作完全一样； “变量名”：JAVA_HOME “变量值”：C:\\Program Files\\Java\\jdk1.7.0_07//你安装的jdk的磁盘路径 “变量名”：Path “变量值”：%Java_Home%\\bin;%Java_Home%\\jre\\bin; “变量名”：ClassPath “变量值”：.;%Java_Home%\\bin;%Java_Home%\\lib\\dt.jar;%Java_Home%\\lib\\tools.jar 注：上面的代码最好也是一个字符不变的贴上去，“变量值”最前面的 .; 不要漏掉。 做完上面的三个步骤之后，环境变量的配置已经完成了。 检查环境变量搭好了：调出“cmd”检查 1、输入：“java”，你应该看到下面的东西： 2、输入“javac”，你应该看到下面的东西： 3、输入“java -version”，你应该看到下面的东西： 如果上面的三幅图都看见了，恭喜，环境变量配置好了！ 为什么要设置Java环境变量? 今天为止对环境变量的设置还不是很懂，而且网上的大部分资料几乎都是设置方法，没有说原因。今天学Linux，遇到了Java环境变量的设置，无意间找到了详细透彻讲解Java环境变量的设置。 “ 1. PATH环境变量。作用是指定命令搜索路径，在shell下面执行命令时，它会到PATH变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把 jdk安装目录下的bin目录增加到现有的PATH变量中，bin目录中包含经常要用到的可执行文件如javac/java/javadoc等待，设置好 PATH变量后，就可以在任何目录下执行javac/java等工具了。 2. CLASSPATH环境变量。作用是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过CLASSPTH来寻找类的。我们 需要把jdk安装目录下的lib子目录中的dt.jar和tools.jar设置到CLASSPATH中，当然，当前目录“.”也必须加入到该变量中。 3. JAVA_HOME环境变量。它指向jdk的安装目录，Eclipse/NetBeans/Tomcat等软件就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。（我觉得这个可能不需要也行，这儿提供的路径只是为了后面写填路径时更加方便，直接. %JAVA_HOME%，不需要反复填写jdk的路径了） 如何设置JAVA_HOME, CLASSPATH和PATH就不用介绍了，网上倒是有很多。之前也设置过好多次，但是一直没有弄懂这里面的意思，今天有看到关于相关的解释（相关链接请点击这里），方便后来者能看看，也是把自己学习的一个过程记录下来，以后忘记了也能过来看到。 以下为置JAVA_HOME,CLASSPATH,PATH的目的:1,设置JAVA_HOME: 一、为了方便引用，比如，你JDK安装在C:\\Program Files\\Java\\jdk1.6.0目录里，则设置JAVA_HOME为该目录路径, 那么以后你要使用这个路径的时候, 只需输入%JAVA_HOME%即可, 避免每次引用都输入很长的路径串; 二、归一原则, 当你JDK路径被迫改变的时候, 你仅需更改JAVA_HOME的变量值即可, 否则,你就要更改任何用绝对路径引用JDK目录的文档, 要是万一你没有改全, 某个程序找不到JDK, 后果是可想而知的—-系统崩溃! 三、第三方软件会引用约定好的JAVA_HOME变量, 不然, 你将不能正常使用该软件, 以后用JAVA久了就会知道, 要是某个软件不能正常使用, 不妨想想是不是这个问题. 2，设置CLASSPATH: 这是一个很有趣,当然也比较折磨初学者的问题, 这个变量设置的目的是为了程序能找到相应的”.class”文件, 不妨举个例子: 你编译一个JAVA程序—A.java, 会得到一个A.class的类文件,你在当前目录下执行java A, 将会得到相应的结果(前提是你已经设置CLASSPATH为”.”). 现在, 你把A.class移到别的目录下(例如:”e:\\”), 执行java A, 将会有NoClassDefFindError的异常,原因就是找不到.class文件, 现在你把CLASSPATH增加为:”.;e:\\”再运行java A, 看看会有什么结果:)~, 一切正常, java命令通过CLASSPATH找到了.class文件! 示例如下：CLASSPATH = .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar 3，设置PATH: 道理很简单, 你想在任何时候都使用%JAVA_HOME%\\bin\\java如此长的前缀来执行java命令吗？当然不会, 于是, 你可以选择把 %JAVA_HOME%\\bin添加到PATH路径下, 这样, 我们在任何路径下就可以仅用java来执行命令了.(当你在命令提示符窗口输入你个代码时,操作系统会在当前目录和PATH变量目录里查找相应的应用程序, 并且执行. 示例：在Path后面添加;%JAVA_HOME%\\bin 对Linux有些熟悉的童鞋应该对上述解释还是比较理解的，在Linux命令行中输入export我们就可以看到当前用户环境中的环境变量，我们之所以可以使用ls等命令也是类似于上面PATH的解释，不用每次都调用很长的命令前缀，而是告诉系统去环境变量中查找就可以了。","categories":[],"tags":[]},{"title":"idea下载教程","slug":"idea下载教程","date":"2019-12-03T07:40:54.000Z","updated":"2020-06-03T09:57:44.181Z","comments":true,"path":"2019/12/03/idea下载教程/","link":"","permalink":"http://yoursite.com/2019/12/03/idea下载教程/","excerpt":"1.下载IntelliJ IDEA 2018.1.6","text":"1.下载IntelliJ IDEA 2018.1.6链接：https://pan.baidu.com/s/18ZcKiPp3LU5S-la10r5icw提取码：ghn0 2.安装IntelliJ IDEA 2018.1.6 3.下载JetbrainsCrack-3.1-release-enc.jar 到 IntelliJ IDEA 2018.1.6 安装路径的bin目录下 链接：https://pan.baidu.com/s/1MFZJlJFvuJbEMoani6MhMw提取码：g1ls 4.编辑IntelliJ IDEA 2018.1.6/bin/idea64.exe.vmoptions下的配置文件（32位操作系统编辑idea.exe.vmoptions） ①Windows系统：在idea64.exe.vmoptions文件最后一行另起一行加上： -javaagent:D:/indea/bin/JetbrainsCrack-3.1-release-enc.jar 注意：红色字体就是IntelliJ IDEA 2018.1.6安装路径 ②Mac系统：在idea64.exe.vmoptions文件最后一行另起一行加上： -javaagent:../bin/JetbrainsCrack-3.1-release-enc.jar 5.重启Idea 6.填入注册码 ThisCrackLicenseId-{ &quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;, &quot;licenseeName&quot;:&quot;Rover12421&quot;, &quot;assigneeName&quot;:&quot;&quot;, &quot;assigneeEmail&quot;:&quot;rover12421@163.com&quot;, &quot;licenseRestriction&quot;:&quot;For Rover12421 Crack, Only Test! Please support genuine!!!&quot;, &quot;checkConcurrentUse&quot;:false, &quot;products&quot;:[ {&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}, {&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;} ], &quot;hash&quot;:&quot;2911276/0&quot;, &quot;gracePeriodDays&quot;:7, &quot;autoProlongated&quot;:false}","categories":[],"tags":[]},{"title":"eclipse部署项目后，在tomcat中的webapps文件夹下没有项目文件","slug":"eclipse部署项目后，在tomcat中的webapps文件夹下没有项目文件","date":"2019-11-21T08:35:50.000Z","updated":"2020-06-03T09:08:22.265Z","comments":true,"path":"2019/11/21/eclipse部署项目后，在tomcat中的webapps文件夹下没有项目文件/","link":"","permalink":"http://yoursite.com/2019/11/21/eclipse部署项目后，在tomcat中的webapps文件夹下没有项目文件/","excerpt":"","text":"发现问题在eclipse中新建Dynamic Web Project，配置好本地的tomcat并写好代码后选择Run on Server,但运行后发现在tomcat的安装目录下的webapps并没有出现所建立的工程名字。 验证很明显项目并没有自动部署到Tomcat的Webapps中而是部署在了别的容器中。在内置浏览器中输入http://localhost:8080/webDemo/login.jsp可正常打开。但在外部浏览器上打开http://localhost:8080时确没有出现所期望的小猫画面。 原因eclipse不像MyEclipse默认将项目部署到tomcat安装目录下的webapps中，而默认部署到工作目录下的.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps中，tmp1文件夹里面存放着该项目的信息。 修改为了使项目默认部署到tomcat安装目录下的webapps中，show view—&gt;servers—&gt;找到需要修改的tomcat—&gt;右击①停止eclipse内的Tomcat服务器(stop)②删除该容器中部署的项目(add and remove)③清除该容器相关数据(clean)④打开tomcat的修改界面(open)⑤找到servers location，选择第二个(User tomcat Installation)⑥修改deploy path为webapps⑦保存关闭需要说明的是①②③必须操作，否则下面的步骤会被置灰无法操作。","categories":[],"tags":[]},{"title":"分离数据库","slug":"分离数据库","date":"2019-11-03T07:30:02.000Z","updated":"2020-06-03T09:57:54.475Z","comments":true,"path":"2019/11/03/分离数据库/","link":"","permalink":"http://yoursite.com/2019/11/03/分离数据库/","excerpt":"SQLServer之分离数据库","text":"SQLServer之分离数据库 执行“数据库分离”后，分离出来的数据库在哪里（哪个目录文件下）？ 分离后的数据库默认的存放地点是 sqlserver数据文件版安装的根目权录\\MSSQL\\Data\\数据库文件(*.mdf,*.ldf) 例如：D:\\Program Files\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data 分离数据库注意事项 要求具有 db_owner 固定数据库角色中的成员资格。 可以分离数据库的数据和事务日志文件，然后将它们重新附加到同一或其他 SQL Server实例。 如果要将数据库更改到同一计算机的不同 SQL Server 实例或要移动数据库，分离和附加数据库会很有用。 分离数据库是指将数据库从 SQL Server 实例中删除，但使数据库在其数据文件和事务日志文件中保持不变。 之后，就可以使用这些文件将数据库附加到任何 SQL Server实例，包括分离该数据库的服务器。 如果存在下列任何情况，则不能分离数据库： 已复制并发布数据库。 如果进行复制，则数据库必须是未发布的。 必须通过运行 sp_replicationdboption禁用发布后，才能分离数据库。如果无法使用 sp_replicationdboption，可以通过运行 sp_removedbreplication删除复制。 数据库中存在数据库快照。必须首先删除所有数据库快照，然后才能分离数据库。不能分离或附加数据库快照。 该数据库正在某个数据库镜像会话中进行镜像。除非终止该会话，否则无法分离该数据库。 数据库处于可疑状态。 无法分离可疑数据库；必须将数据库设为紧急模式，才能对其进行分离。 数据库为系统数据库。 分离只读数据库将会丢失有关差异备份的差异基准的信息。 分离数据库时生成的错误会阻止完全关闭数据库和重新生成事务日志。 收到错误消息后，请执行下列更正操作： 重新附加与数据库关联的所有文件，而不仅仅是主文件。 解决导致生成错误消息的问题。 再次分离数据库。 使用SSMS数据库工具分离数据库 1、连接服务器-》展开服务器-》选择数据库-》右键点击-》选择任务-》选择分离。 2、在分离数据库对话框-》右边要分离得数据库对话框-》数据库名称：列出要分离的数据库-》删除连接：断开与指定数据库的连接，不能分离连接为活动状态的数据库-》更新统计信息：默认情况下，分离操作将在分离数据库时保留过期的优化统计信息；若要更新现有的优化统计信息，请单击此复选框-》状态：显示以下状态之一： 就绪或 未就绪-》消息：当数据库进行了复制操作，则 状态为未就绪， 消息列将显示已复制数据库。如果数据库有一个或多个活动连接，则状态为未就绪，消息列显示&lt;number_of_active_connections&gt; 个活动连接，例如：1 个活动连接。 在分离数据库之前，需要通过选择 删除连接断开所有活动连接。 3、数据库分离结果。使用T-SQL脚本分离数据库 语法 --声明数据库引用 use other_database_name; go --语法 exec sp_detach_db [@dbname=] &#39;database_name&#39; [,[@skipchecks= ] &#39;skipchecks&#39;] [,[@keepfulltextindexfile=] &#39;KeepFulltextIndexFile&#39; ]; go 语法注释 --语法示例 --other_database_name --声明当前使用的数据库不是要分离的数据库 --[@dbname=]&#39;database_name&#39; --要分离的数据库的名称。database_name是sysname值，默认值为NULL。 --[@skipchecks =]&#39;skipchecks&#39; --指定跳过还是运行update statistic。同时将skipchecks是nvarchar(10)值，默认值为NULL。 --若要跳过更新统计信息，请指定，则返回 true。 若要显式运行更新统计信息，请指定false。 --默认情况下，执行update statistic可更新有关表和索引中的数据的信息。 对于要移动到只读介质的数据库，执行 UPDATE STATISTICS 非常有用。 --[@keepfulltextindexfile=] &#39;KeepFulltextIndexFile&#39; --指定在数据库分离操作过程中不会删除与所分离的数据库关联的全文索引文件。 --KeepFulltextIndexFile是nvarchar(10)值，该值具有默认值为true。 --如果KeepFulltextIndexFile是false、 与数据库关联的全文索引的所有文件和全文索引的元数据被删除，除非数据库是只读的。 --如果为NULL，则返回true，全文索引相关的元数据保留。 --@keepfulltextindexfile中的未来版本将删除参数SQL Server。请不要在新的开发工作中使用此参数，并尽快修改当前仍在使用此参数的应用程序。 示例 --声明数据库引用 use master; go --进行数据库分离 --方式一 --exec sp_detach_db @dbname=&#39;testss&#39; --,@skipchecks=&#39;true&#39; --,@keepfulltextindexfile=&#39;true&#39;; --方式二 exec sp_detach_db &#39;testss&#39; ,&#39;true&#39; ,&#39;true&#39;; go 示例结果：T-SQL脚本执行完毕需要在对象资源管理器刷新才能看到分离结果。 分类: SQLServer","categories":[],"tags":[]},{"title":"ssm框架","slug":"ssm框架","date":"2019-10-01T08:25:42.000Z","updated":"2020-06-03T09:08:10.523Z","comments":true,"path":"2019/10/01/ssm框架/","link":"","permalink":"http://yoursite.com/2019/10/01/ssm框架/","excerpt":"SSM框架是spring MVC，spring和mabatis框架的整合，是标准的MVC模式，将整个系统划分为表现层，controller层，service层，DAO层四层。spring MVC：负责请求的转发和视图管理。 spring ：实现业务对象管理。 mybatis ：作为数据对象的持久化引擎。","text":"SSM框架是spring MVC，spring和mabatis框架的整合，是标准的MVC模式，将整个系统划分为表现层，controller层，service层，DAO层四层。spring MVC：负责请求的转发和视图管理。 spring ：实现业务对象管理。 mybatis ：作为数据对象的持久化引擎。 一.谈谈你对Spring框架的理解1.Spring是什么？**Spring一个开源的，用来简化企业级应用开发的应用开发框架。Spring的核心就是IOC（控制反转）和AOP（面向切面编程）。** Spring容器：spring框架中的一个核心模块，用来管理对象（包括对象的创建，销毁和初始化等）。它帮助完成类的初始化与装配工作，让开发者从这些底层类的实例化，依赖关系装配类的工作中脱离出来，专注于更有意义的业务逻辑开发工作。 启动spring容器: step1.导3.2.8的包 step2.配置xml文件+junit包(这个包是为了测试用的) step3.读xml文件创建容器 Spring如何创建对象？——spring容器依据配置文件创建对象。 方式一: 无参构造器(或者缺省构造器)step1:为类添加无参构造器(内部有了这个无参构造的类就可以省略这一步) step2:配置文件中添加一个bean元素 step3:启动创建容器,调用容器的getBean方法就是实例化这个类返回对象&lt;—重要思想!!!!!!!!!!!!! Step1： step2： step3： 方式二: 用静态工厂方法创建(了解即可)—解决抽象类 Calendar c = ac.getBean(“cal”,Calendar.class); 方式三: 用实例工厂方法创建(了解即可)—解决抽象类** Date time = ac.getBean(“time”,Date.class);** 2.Spring的作用：** a.简化开发：spring对常用的API都做了一些简化和封装（比如，用spring jdbc访问数据库，就不用考虑如何获取连接和关闭连接）。 b.解耦：spring帮我们管理对象的依赖关系，这样对象间的耦合度低，方便维护。 c.集成其他框架：spring可以将其他的框架集成进来。（比如可以将Mybatis等框架集成进来） 1.1 ioc是什么？IOC——：inversion of control，即“控制反转”，ioc不是一种技术，是一种设计思想，一个重要的面向对象编程的法则。在java开发中，IOC意味着将你设计好的对象交给容器控制，而不是在传统的在你的对象内部直接控制。 何为“控制”：传统的JAVA SE程序设计，我们是从对象内部通过new创建对象，是程序控制对象的创建，而IOC有一个专门的容器（IOC容器）创建对象，IOC容器控制外部资源的获取（包括对象，文件等）。 何为“反转”：传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，即“正转”。而“反转”，是由容器来帮我们去创建及注入依赖对象。对象只是被动的接受依赖对象。依赖对象的获取被反转了。 1.2 ioc有什么用？ ioc容器能帮我们管理对象的依赖关系，这样对象与对象的耦合度低，方便代码的维护。对于spring框架来说，ioc就是由spring来负责控制对象的生命周期和对象间的关系。 1.3 DI DI——dependenc injection，即“依赖注入”。IOC与DI有什么关系呢？其实它们是同一个概念的不同角度描述。“依赖注入”，相对ioc而言，“依赖注入”明确地描述了“被注入对象”依赖ioc容器配置依赖对象。IOC的一个重点是在系统运行中，动态的向某个对象提供所需要的其他对象，这一点通过DI实现。DI如何实现？这就要引入java 1.3之后的一个重要特征——反射（reflection）。它允许程序在运行的时候动态生成对象、执行对象的方法、改变对象的属性。spring就是通过反射注入的。 1.4 spring的两种注入方式1.4.1. 构造器注入：通过调用的类的构造函数，将接口实现类通过构造函数变量传入。构造器注入步骤:step1.添加相应构造器： step2：配置文件xml xml的启动相当于容器的启动,constructor-arg意思是构造器,相当于写了Manager类的构造方法ref=cp相当于Computer类型的对象cp,因为构造方法里面有this.cp=cp;所以就相当与给Manager类里面的cp赋值了(类型必须是匹配的,都是Computer类型)相当于就在xml表里面写了Manager(Computer cp){},xml一启动就调用了 1.4.2:setter方法注入：是容器通过调用无参构造器或无参static 工厂方法实列化bean之后，调用该bean的setter方法， 即实现了基于setter的依赖注入 set方法注入步骤： step1.为A类添加 IB类型常量并写上setB(): step2.配置文件xml: 这个name=b相当于写了A类里面的setB方法,ref=c相当于C类型的对象c,因为set方法里面是this.b=b,所以一旦调用set方法就相当于给A类里面的b赋值了 一.使用注解简化配置文件组件扫描: Spring容器启动之后会检查某个包以及子包下面的所有的类,如果类前面有特定注解(比如@Component),则容器会将该类纳入容器进行管理(就相当于配置了一个bean元素) 其中init跟destroy的注释@PostConstruct跟@PreDestroy是sun公司的,要导annotation包生命周期相关注解:@PostConstruct/@PreDestroy延迟加载和作用域相关注解:@Lazy(true)/@Scope(“prototype”)/@Scope(“singleton”)依赖注入相关注解(就是set注入和构造器注入):@Autowired和@Qualifier(“wt”) ，@Qualifier如果不加的话,会按照byType的方式来自动装配,就有可能找到多个,建议最好使用该注解,明确指定被注入的bean的id。@Resource(name=”wt”): 1.只支持set方法的注入. 2.使用name属性指定被注入的bean的id STEP1.在类前面加注释,方法前面加注释 STEP2.配置里面扫描包 测试结果1 : 测试结果2： 测试结果3： Restaurant是set注入， Leader是有参构造方法注入， Manager是@Resource(name=””)注入&lt; 测试 测试结果5： 测试结果6： 测试结果7： 2.1 AOP2.1.1 Aop是什么？AOP——（Aspect-Oriented Programming），即面向切面编程。AOP可以说是OOP的补充和完善，是Spring框架核心功能之一。2.1.2 AOP的特点（优势）？为了解决当我们需要为分散的对象引入公共行为的时候，如程序中交叉业务逻辑（系统日志，事务处理，系统安全验证，系统数据缓存等等），这是我们应当把它封装成一个切面，注入到目标对象（具体逻辑）中去。可以简化代码开发和效率，能够在不改变原有代码的基础上扩展新的功能实现。 2.1.3AOP 核心概念、术语AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。其相关概念术语如下：切面(aspect): 横切面对象,一般为一个具体类对象(本质就是加了@Aspect注解的类)通知(advice):拦截到连接点之后只要执行的方法切入点(pointcut):对连接点拦截内容的一种定义连接点(joinpoint):程序执行过程中某个特定的点，一般指被拦截到的的方法目标对象(target)：代理的目标对象。通知(Advice):在切面的某个特定连接点上执行的动作，例如before,after等 知识点术语强化:1) 切面(可以简单理解为要植入的新的业务功能,这个功能交给某个类负责,这个类就是切面)2) 通知(可以简单理解为一个业务中的扩展逻辑的若干步骤,例如先做什么(before),再做什么(afterReturn),最后做什么)3) 切入点(在原有的哪些业务方法上扩展新的业务,可以将切入点理解为方法的集合)4) 连接点(可以简单理解为切入点中的一个具体方法)5) 目标对象(需要扩展功能的那个对象,一般为被代理对象)6) 代理对象(负责调用切面中的方法为目标对象植入新的功能) ###2.1.4 Spring AOP 的编程实现 Spring中AOP代理由Spring的IOC容器负责生成、管理。其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理。 AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：1. 定义普通业务组件（切面）2. 定义切入点，一个切入点可能横切多个业务组件3. 定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作。所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理 2.1.5 AOP怎么用？面向切面@Aspectstep1. 导入3个Maven jar包,spring-context(里面包含了spring-aop),aspectjrt,aspectjweaver ###step2. 配置spring-aop.xml step3.写一个代理类,这个类相当于切面,注解@Aspect@Component,英文意思就是切面,扫描,@Order(1)多个切面类时执行顺序注解,数字越小越先执行，在方法前面加你要的功能注解并指向被代理类,称为切入点如：@Before(“bean(projectServiceImpl)”),实现类开头字母小写@AfterThrowing @AfterReturning @After 分别为目标方法异常后,目标方法正常结束后,目标方法之后， 空间想象就是当被代理类进来的时候会先经过代理类这个’横切面’过滤,在被代理类方法运行前后记录日志 step4. 被代理类实质上就是业务层,必须有注解@Service step5. 测试的时候getBean(“业务层类名开头字母小写”,指向业务层实现的那个接口的名字); step6. 对面向切面的接入点封装,之后就直接调用,如:@Before(“method()”)@Pointcut(“bean(projectServiceImpl)”)public void method(){}","categories":[],"tags":[]},{"title":"SSM（Spring+Spring MVC+MyBatis）框架整合搭建详细步骤","slug":"SSM（Spring-Spring-MVC-MyBatis）框架整合搭建详细步骤","date":"2019-09-03T08:18:50.000Z","updated":"2020-06-03T09:07:56.283Z","comments":true,"path":"2019/09/03/SSM（Spring-Spring-MVC-MyBatis）框架整合搭建详细步骤/","link":"","permalink":"http://yoursite.com/2019/09/03/SSM（Spring-Spring-MVC-MyBatis）框架整合搭建详细步骤/","excerpt":"因为 Spring MVC 是 Spring 框架中的一个子模块，所以 Spring 与 SpringMVC 之间不存在整合的问题。实际上，SSM 框架的整合只涉及 Spring 与 MyBatis 的整合以及 Spring MVC 与 MyBatis 的整合。","text":"因为 Spring MVC 是 Spring 框架中的一个子模块，所以 Spring 与 SpringMVC 之间不存在整合的问题。实际上，SSM 框架的整合只涉及 Spring 与 MyBatis 的整合以及 Spring MVC 与 MyBatis 的整合。实现 SSM 框架的整合首先需要准备 3 个框架的 JAR 包以及其他整合所需要的 JAR 包。 在《MyBatis与Spring的整合步骤》教程中已经讲解了 Spring 与 MyBatis 框架整合所需要的 JAR 包，本节只需再加入 Spring MVC 的相关 JAR 包（spring-web-3.2.13.RELEASE.jar 和 spring-webmvc-3.2.13.RELEASE.jar）即可。因此，SSM 框架整合所需的 JAR 包如图 1 所示。 图 1 ssm 框架整合所需 JAR 包 SSM 框架整合应用测试下面是一个应用案例（根据用户名模糊查询用户信息，用户表是《第一个MyBatis程序》教程中的数据表 user），使用 SSM 框架实现该案例的具体步骤如下： 1. 创建应用并导入相关 JAR 包创建应用 ssm，将图 1 所示的 JAR 包复制到应用的 lib 中。 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;${pageContext.request.contextPath }/select&quot; method=&quot;post&quot;&gt; 输入用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;/&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 2. 创建信息输入页面在 WebContent 目录下创建 input.jsp 页面，具体代码如下： package com.po; /** * mybatis数据库中user表的持久化类 */ public class MyUser { private Integer uid; private String uname; private String usex; public Integer getUid() { return uid; } public void setUid(Integer uid) { this.uid = uid; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public String getUsex() { return usex; } public void setUsex(String usex) { this.usex = usex; } } 3. 创建持久化类在 src 目录下创建一个名为 com.po 的包，并在该包中创建一个 PO 类 MyUser。具体代码如下： package com.po; /** * mybatis数据库中user表的持久化类 */ public class MyUser { private Integer uid; private String uname; private String usex; public Integer getUid() { return uid; } public void setUid(Integer uid) { this.uid = uid; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public String getUsex() { return usex; } public void setUsex(String usex) { this.usex = usex; } } 4. 创建 Dao 层在 src 目录下创建一个名为 com.dao 的包，并在该包中创建一个名为 UserDao 的接口。具体代码如下： package com.dao; import java.util.List; import org.springframework.stereotype.Repository; import com.po.MyUser; @Repository(&quot;userDao&quot;) /* * 使用Spring自动扫描MyBatis的接口并装配 （Spring将指定包中所有被@Mapper注解标注的接口自动装配为Mybatis的映射接口 */ public interface UserDao { /** * 接口方法对应SQL映射文件UserMapper.xml中的id */ public List&lt;MyUser&gt; selectUserByUname(MyUser user); } 5. 创建 Service 层在 src 目录下创建一个名为 com.service 的包，并在该包中创建一个名为 UserService 的接口和该接口的实现类 UserServiceImpl。 UserService 接口的代码如下： package com.service; import java.util.List; import com.po.MyUser; public interface UserService { public List&lt;MyUser&gt; selectUserByUname(MyUser user); } UserServiceImpl 实现类的代码如下： package com.service; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import com.dao.UserDao; import com.po.MyUser; @Service(&quot;userService&quot;) @Transactional /** * 加上注解@Transactional可以指定这个类需要受Spring的事务管理， *注意@Transactional只能针对public属性范围内的方法添加， *本案例并不需要处理事务，在这里只是告诉读者如何使用事务 */ public class UserServiceImpl implements UserService { @Autowired private UserDao userDao; @Override public List&lt;MyUser&gt; selectUserByUname(MyUser user) { return userDao.selectUserByUname(user); } } 6. 创建 Controller 层在 src 目录下创建一个名为 com.controller 的包，并在该包中创建一个名为 UserController 的控制器类。具体代码如下： package com.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import com.dao.UserDao; import com.po.MyUser; @Controller public class UserController { @Autowired private UserDao userDao; @RequestMapping(&quot;/select&quot;) public String select(MyUser user, Model model) { List&lt;MyUser&gt; list = userDao.selectUserByUname(user); model.addAttribute(&quot;userList&quot;, list); return &quot;userList&quot;; } } 7. 创建用户信息显示页面在 WEB-INF 目录下创建文件夹 JSP，并在该文件夹下创建用户信息显示页面 userList. jsp。具体代码如下： &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 用户信息 &lt;br&gt; &lt;c:forEach items=&quot;${userList }&quot; var=&quot;user&quot;&gt; ${user.uid }&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ${user.uname }&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ${user.usex }&lt;br&gt; &lt;/c:forEach&gt; &lt;/body&gt; &lt;/html&gt; 8. 创建相关配置文件1）web.xml在 WEB-INF 目录下创建 web.xml 文件，并在该文件中实例化 ApplicationContext 容器、启动 Spring 容器、配置 DispatcherServlet 以及配置字符编码过滤器。具体代码如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot;&gt; &lt;display-name&gt;springMVC&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 实例化ApplicationContext容器 --&gt; &lt;context-param&gt; &lt;!-- 加载src目录下的 applicationContext-*.xml文件--&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext-*.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt; org.springframework.web.filter.CharacterEncodingFilter &lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;listener&gt; &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;listener&gt; &lt;listener-class&gt; org.springframework.web.util.Log4jConfigListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;/web-app&gt; 2）springmvc-servlet.xml在 WEB-INF 目录下创建 Spring MVC 的核心配置文件 springmvc-servlet.xml，在该文件中仅配置控制器扫描包和视图解析器，具体代码如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 使用扫描机制扫描包 --&gt; &lt;context:component-scan base-package=&quot;com.controller&quot; /&gt; &lt;!-- 完成视图的对应 --&gt; &lt;!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;/beans&gt; 3）log4j.properties在 src 目录下创建 MyBatis 的日志文件 log4j.properties，具体代码如下： # Global logging configuration log4j.rootLogger=ERROR,stdout # MyBatis logging configuration... log4j.logger.com.mybatis=DEBUG # Console output... log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 4）applicationContext.xml在 src 目录下创建 Spring 的配置文件 applicationContext.xml，在该文件中配置数据源、添加事务支持、开启事务注解、配置 MyBatis 工厂、进行 Mapper 代理开发以及指定扫描包。具体代码如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;!--配置数据源 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot; scope=&quot;singleton&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;1128&quot; /&gt; &lt;property name=&quot;maxTotal&quot; value=&quot;30&quot; /&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;10&quot; /&gt; &lt;property name=&quot;initialSize&quot; value=&quot;5&quot; /&gt; &lt;/bean&gt; &lt;!-- 添加事务支持 --&gt; &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;/bean&gt; &lt;!-- 开启事务注解 --&gt; &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt; &lt;!-- 配置mybitas工厂，同时指定数据源，并与MyBatis完美整合 --&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;!-- configLocation的属性值为Mybatis的核心配置文件 --&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot; /&gt; &lt;/bean&gt; &lt;!-- Mapper代理开发，使用Spring自动扫描Mybatis的接口并装配 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!-- mybatis-spring组件的扫描器 --&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.dao&quot; /&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt; &lt;/bean&gt; &lt;!-- 指定需要扫描的包（包括子包），使注解生效。dao包在mybatis-spring组件中已经扫描，这里不在需要扫描 --&gt; &lt;context:component-scan base-package=&quot;com.service&quot; /&gt; &lt;/beans&gt; 5）创建 MyBatis 的核心配置文件和 SQL 映射文件在 src 目录下创建 com.mybatis 文件夹，并在该文件夹中创建 MyBatis 的核心配置文件 mybatis-config.xml。具体代码如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;mappers&gt;&lt;!-- 映射器告诉MyBatis到哪里去找映射文件 --&gt; &lt;mapper resource=&quot;com/dao/UserMapper.xml&quot; /&gt; &lt;/mappers&gt; &lt;/configuration&gt; 在 com.mybatis 文件夹中创建 SQL 映射文件 UserMapper.xml。具体代码如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.dao.UserDao&quot;&gt; &lt;select id=&quot;selectUserByUname&quot; resultType=&quot;com.po.MyUser&quot; parameterType=&quot;com.po.MyUser&quot;&gt; select * from user where 1=1 &lt;if test=&quot;uname!=null and uname!=&#39;&#39;&quot;&gt; and uname like concat(&#39;%&#39;,#{uname},&#39;%&#39;) &lt;/if&gt; &lt;/select&gt; &lt;/mapper&gt; 9. 发布并运行应用首先将 springMVCDemo11 应用发布到 Tomcat 服务器并启动 Tomcat 服务器，然后通过地址“http://localhost:8080/ssm/input.jsp” 访问信息输入页面，运行结果如图 2 所示。 图 2 信息输入页面 在图 2 中输入用户名，例如“张”，然后单击“提交”按钮，显示如图 3 所示的结果。 图 3 用户列表页面","categories":[],"tags":[]},{"title":"pyecharts基本图表","slug":"pyecharts基本图表","date":"2019-06-23T08:16:06.000Z","updated":"2020-06-03T09:07:41.058Z","comments":true,"path":"2019/06/23/pyecharts基本图表/","link":"","permalink":"http://yoursite.com/2019/06/23/pyecharts基本图表/","excerpt":"链接地址:链接地址","text":"链接地址:链接地址首页界面","categories":[],"tags":[]},{"title":"python excel常用方法归纳总结","slug":"python-excel常用方法归纳总结","date":"2019-06-05T08:14:50.000Z","updated":"2020-06-03T09:07:33.424Z","comments":true,"path":"2019/06/05/python-excel常用方法归纳总结/","link":"","permalink":"http://yoursite.com/2019/06/05/python-excel常用方法归纳总结/","excerpt":"python excel常用方法归纳总结xlrd模块： Python的三方库xlrd用于对excel文件进行读取，可以是“.xls”或“.xlsx”格式（旧版本可能不支持“.xlsx”）。 下载安装：https://pypi.org/project/xlrd/#files，或者使用pip安装 “pip install xlrd” API文档：https://xlrd.readthedocs.io/en/latest/api.html","text":"python excel常用方法归纳总结xlrd模块： Python的三方库xlrd用于对excel文件进行读取，可以是“.xls”或“.xlsx”格式（旧版本可能不支持“.xlsx”）。 下载安装：https://pypi.org/project/xlrd/#files，或者使用pip安装 “pip install xlrd” API文档：https://xlrd.readthedocs.io/en/latest/api.htmlxlrd常用的方法： work_book = xlrd.open_workbook(filename)：打开指定路径的excel文件，返回excel处理对象，但无法打开不存在的文件。 work_book.nsheets：返回excel中的sheet个数。 work_book.sheets()：加载并返回excel中的所有sheet对象组成的列表。 work_book.sheet_by_index(sheetx)：返回对应索引的sheet对象，索引范围为range(work_book.nsheets)。 work_book.sheet_by_name(sheet_name)：返回对应sheet名称的sheet对象。 work_book.sheet_names()：返回excel中所有sheet名称组成的列表。 sheet.book：sheet所属的work_book。 sheet.name：sheet的名称。 sheet.nrows：sheet中的行数。 sheet.ncols：sheet中的列数。 sheet.row(rowx)：返回对应行的cell对象组成的列表。 sheet.row_slice(rowx, start_colx=0, end_colx=None)：返回对应行的cell对象组成的列表，也自定义切片获取行的cell对象列表。 sheet.col(colx)：返回对应列的cell对象组成的列表。 sheet.col_slice(colx, start_rowx=0, end_rowx=None)：返回对应列的cell对象组成的列表，也自定义切片获取行的cell对象列表。 sheet.cell(rowx, colx)：返回对应单元格的cell对象。 sheet.cell_value(rowx, colx)：返回对应单元格的值。 sheet.row_len(rowx)：返回对应行的有效单元格数。 sheet.get_rows()：返回一个行的迭代器，每次迭代返回一个cell对象组成的列表，即这一行的cell对象列表。 sheet.row_values(rowx, start_colx=0, end_colx=None)：返回对应行的值的列表，也可以自定义切片获取某些值。 sheet.col_values(colx, start_rowx=0, end_rowx=None)：返回对应列的值的列表，也可以自定义切片获取某些值。 sheet.cell(rowx, colx).value：返回对应单元格的值文档。","categories":[],"tags":[]},{"title":"idea基本配置","slug":"idea基本配置","date":"2019-05-06T07:47:26.000Z","updated":"2020-06-03T09:07:22.823Z","comments":true,"path":"2019/05/06/idea基本配置/","link":"","permalink":"http://yoursite.com/2019/05/06/idea基本配置/","excerpt":"","text":"最近在学习新技术时，发现许多教程都是使用IDEA开发的。因为原来使用eclipse，感觉不想换别的开发工具了。但是因为构建项目时，IDEA和eclipse还是有许多不同，因此准备把自己学习实用IDEA的资料记录下。毕竟网上好多实用教程那叫一个啰嗦，还竟是没用的配置。因为是eclipse的老用户，因此先把一些eclipse干的事实现下，再有就是扩展一些IDEA好的功能。一、IDEA的安装 官网地址：https://www.jetbrains.com/idea/download/#section=windows 百度网盘分享：https://pan.baidu.com/s/1GFGWtCYVvk03y15HFu98xA 前提：我安装在window10系统，安装版本为：2018.2，安装时间：2018年8月10日 当然了你也可以根据需要下载属于自己操作系统自己喜欢的版本。而且我是用2018.2后面有原因。 安装过程很简单，截图就不上了，就是选择一个安装路径，然后在选择桌面上生成32bit还是64bit的launtch,根据你操作系统来。貌似现在都是64bit吧。 说一下安装到最后，它让你输入注册码。也就是收费了呗。网上有很多破解的方法，还有就是搭建服务器环境之类的，总之为了免费搞了好久都不行，要么显示注册码在2017年就过期了，要么就是验证通过，但是上面又报验证码不适合之类的。为了省力气，在某宝上搜IDEA注册码，然后发给我一个长长的串，你在下图位置输入：就可以进入到开发界面了。（注：费用1年5元，真心不想在这折腾了） 完成后，软件来到这个页面： 讲一下： 1、Create New Project 这个就是我们创建新项目的地方，一般出在第一次安装或者没有项目时出现这个。 2、Import Project 这个就是引入工程，可以支持eclipse开发的项目（注意修改配置文件，坑很深）以及Maven项目。具体引入流程会在后面的博客中具体涉及。 3、Open 打开现有项目，别的IDEA开发的，拿过来打开 4、Check out from Version Control 里面下拉框有：CVS , Git,TFS,Mercurial,Subversion五个选项，这是版本控制功能，很强大，可以和对应的相关网站上的项目直接克隆到本地，很是强大。二、简单配置使用 我们因为第一次安装没有项目，所以想进行配置必须先到开发界面，因此必须先创建个项目（很蛋疼，要是没项目还不行了呢） 第一步：我们点击 Create New Project 第二步：我们可以看到左侧有许多种类型项目可以创建，这里我们选择java。同时右边的Project SDK相当于JDK，我们只需要找到我们的JDK安装目录即可。 第三步：给项目取名字，同时指定了项目了所在地（注意：在IDEA中并没有workspace概念）这里的MJava项目名只是作为一个指示作用，并不是工作空间名称。在IDEA中使用Project和Module来划分工程和项目。例如我们知道Spring是由许多模块组成，而每个模块又可以独自作为一个项目存在（例如SpringMVC/Spring Core/Spring IOC等等）因此这里可以把新建Project当做Spring的存在，而Spring的子模块作为Module。IDEA在我们新建Project时默认是Project和Module一对一对应，我们可以继续新建Module,而不能在Project中在新建Project了。当然如果我们再次新建Project，IDEA会新打开一个窗口或者将此Project覆盖，当我们想回到开始的Project时，只需重新打开。 可以看到打开的项目结构，IDEA生成项目依赖jar以及一些配置文件。.idea配置是属于Project的，而.iml属于Module的。IDEA为我们默认生成一个项目，所以出现src文件夹。这个是项目源文件。我们自己新建一个Module，然后看一下文件夹中项目分布。 可以看到文件夹中出现了我们后来创建的First项目。如果要创建另一个类型的项目，可以在顶层File中选择新建Project。 基本的创建完成后下面开始进行配置： 1.IDEA的配置基本都与setting有关，首先大家先把快捷工具栏调出来，个人认为很喜欢： 2.现在将我们最常用的总体设置栏打开 方法一：快捷键：Ctrl + ALT + s 方法二：上面菜单File - Setting 方法三：点击刚才我们调出来工具栏那个像扳手 3.下面进行具体的配置 字体设置：File | Settings | Editor | Font可以对字体大小、字体、以及行间距等进行设置 主题设置：File | Settings | Appearance &amp; Behavior | Appearance 在UI Options中Theme里面有两个主题供选择（第一个黑色背景，第二个白色背景） 编码设置：File | Settings | Editor | File Encodings 其中单选框勾选是为了在.properties文件中中文注释可以显示，而不是变为其他编码形成的不明字符。三、简单应用 下面开始进行开发一个java的Hello World程序，在我们运行程序时，下面会出现短暂的build，因为IDEA在编译我们的代码。不过编译可以进行全项目编译以及分段编译等，具体设置在菜单栏的Build中设置。 同时在打印后，出现一个out文件夹，里面文件为.class文件，即编译文件。 这里写两个快捷键 main函数快捷键：psvm + Tab(单词开头首字母) 打印语句：souf + Tab 其他快捷键发现后再记录。到这里基本能够完成简单的使用了。四、总结 IDEA功能远不止这些，后续IDEA系列要编写博客内容包括目录如下： 版本控制，与Git以及SVN等进行项目版本控制，上传更细以及Clone项目 添加Tomcat等WEB项目服务中间件 Maven项目创建 框架使用集成 JVM参数启动与断点程序测试 项目打包部署文件的导出（maven和简单的项目） 最后附上参考IDEA教程： http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/theme-settings.html","categories":[],"tags":[]},{"title":"java之jar包下载","slug":"java之jar包下载","date":"2019-03-03T07:39:31.000Z","updated":"2020-06-03T09:07:14.817Z","comments":true,"path":"2019/03/03/java之jar包下载/","link":"","permalink":"http://yoursite.com/2019/03/03/java之jar包下载/","excerpt":"Java jar包下载地址","text":"Java jar包下载地址 https://mvnrepository.com/ 页面首页","categories":[],"tags":[]},{"title":"Eclipse优化，Eclipse调优，Eclipse 卡解决方案","slug":"Eclipse优化，Eclipse调优，Eclipse-卡解决方案","date":"2019-01-03T09:16:37.000Z","updated":"2020-06-03T09:53:42.211Z","comments":true,"path":"2019/01/03/Eclipse优化，Eclipse调优，Eclipse-卡解决方案/","link":"","permalink":"http://yoursite.com/2019/01/03/Eclipse优化，Eclipse调优，Eclipse-卡解决方案/","excerpt":"","text":"参考链接","categories":[],"tags":[]},{"title":"linux的基本操作","slug":"linux的基本操作","date":"2018-12-09T08:20:04.000Z","updated":"2019-05-29T12:32:10.074Z","comments":true,"path":"2018/12/09/linux的基本操作/","link":"","permalink":"http://yoursite.com/2018/12/09/linux的基本操作/","excerpt":"","text":"linuxLinux 文件系统是一个目录树的结构，文件系统结构从一个根目录开始，根目录下可以有任意多个文件和子目录，子目录中又可以有任意多个文件和子目录 bin 存放二进制可执行文件(ls,cat,mkdir等) boot 存放用于系统引导时使用的各种文件 dev 用于存放设备文件 etc 存放系统配置文件 home 存放所有用户文件的根目录 lib 存放跟文件系统中的程序运行所需要的共享库及内核模块 mnt 系统管理员安装临时文件系统的安装点 opt 额外安装的可选应用程序包所放置的位置 proc 虚拟文件系统，存放当前内存的映射 root 超级用户目录 sbin 存放二进制可执行文件，只有root才能访问 tmp 用于存放各种临时文件 usr 用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录 var 用于存放运行时需要改变数据的文件 对目录的操作lsls -a 可以显示全部文档 包括隐藏文档都会背一起列出来 ls -d 仅仅列出目录本身 而不是列出目录内的文件数据 ls -l 可以显示 文件的属性与权限等等 其中这些在后面可以见 地址来列出 其他文件的信息 ls -al /var/www 显示为 www目录下的文件信息 drwxr-xr-x 3 root root 4096 3月 19 22:36 . drwxr-xr-x 15 root root 4096 3月 19 20:39 .. drwxr-xr-x 3 root root 4096 3月 20 19:37 html lrwxrwxrwx 1 root root 21 3月 19 22:36 phpmyadmin -&gt; /usr/share/phpmyadmin pwd显示目录所在位置 mkdirmkdir 目录名 创建新目录 mkdir -p /text1/text2/text3/text4 可以递归创建你所需要的目录 mkdir -m 711 text2 创建权限为rwx--x--x 的目录 rmdirrmdir 目录名 删除空目录 rmdir -p 目录名 连同上一级空的目录也一起删除 cp拷贝文件和目录 cp 参数 来源位置 目标位置 参数如下： -a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用) -d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身； -f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次； -i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用) -l：进行硬式连结(hard link)的连结档创建，而非复制文件本身； -p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)； -r：递归持续复制，用於目录的复制行为；(常用) -s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件； -u：若 destination 比 source 旧才升级 destination ！ rmrm [-fir] 文件或目录 -f : 就是force的意思，忽略不存在的文件，不会有警告信息 -i : 互动模式，在删除前会询问使用者的意见 -r : 递归删除。最常见的是在目录里面删除了，比较危险 mv(移动文件或目录，或修改名称)mv 文件 目录 把文件移动到目录下 mv 目录名字 目录新名字 目录该名称 Linux文件内容查看cat 由第一行开始显示文件内容 tac 有最后一行开始显示文件内容 nl 显示的时候，顺着输出行号 more 一页一页的显示文件内容 less 与more相似，但比more更好的是可以向前翻页 head 只看头几行 tail 只看尾几行 cat-b 列出行号，仅针对非空白行做行号显示，空白行不标行号 head tailhead -n 10 1.txt 显示1.txt头十行的内容 tail -n 10 1.txt 显示1.txt尾巴十行的内容 Linux磁盘管理df : 列出文件系统的整体磁盘使用量 du : 检查磁盘空间使用量 fdisk : 用于磁盘分区 df常见的参数 -a : 列出所有的文件系统，包括系统特有的文件系统 -k : 以KBytes的容量来显示各文件系统 -m : 以MBytes的容量来显示各文件系统 -h : 艺人们较易阅读的格式自行显示 -H : 以M=1000K 取代 M=1024k 的进位方式 -T : 显示文件系统类型，连同该partitio的filesystem名称也列出 -i : 不用硬盘容量，而以inode的数量来显示 du常见的参数 -a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。 -h ：以人们较易读的容量格式 (G/M) 显示； -s ：列出总量而已，而不列出每个各别的目录占用容量； -S ：不包括子目录下的总计，与 -s 有点差别。 -k ：以 KBytes 列出容量显示； -m ：以 MBytes 列出容量显示； 特殊符号表特殊符号 代表意义 [:alnum:] 代表英文大小写字符及数字，亦即 0-9, A-Z, a-z [:alpha:] 代表任何英文大小写字符，亦即 A-Z, a-z [:blank:] 代表空格键不 [Tab] 按键两者 [:cntrl:] 代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等 [:digit:] 代表数字而已，亦即 0-9 [:graph:] 除了空格符 (空格键不 [Tab] 按键) 外的其他所有按键 [:lower:] 代表小写字符，亦即 a-z [:print:] 代表任何可以被打印出来的字符 [:punct:] 代表标点符号 (punctuation symbol)，亦即：” ‘ ? ! ; : # $… [:upper:] 代表大写字符，亦即 A-Z [:space:] 任何会产生空白的字符，包括空格键, [Tab], CR 等等 [:xdigit:] 代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字不字符 grep进阶的选项与参数[root@www ~]# grep [-acinv] [--color=auto] &#39;搜寻字符串&#39; filename 选项与参数： -a ：将 binary 档案以 text 档案的方式搜寻数据 -c ：计算找到 &#39;搜寻字符串&#39; 的次数 -i ：忽略大小写的不同，所以大小写视为相同 -n ：顺便输出行号 -v ：反向选择，亦即显示出没有 &#39;搜寻字符串&#39; 内容的那一行！ --color=auto ：可以将找到的关键词部分加上颜色的显示！ -A ：后面可加数字，为 after 的意思，除了列出该行外，后续的 n 行也列出来； -B ：后面可加数字，为 befer 的意思，除了列出该行外，前面的 n 行也列出 练习1.搜索特定字符 cat 1.txt| grep -n &#39;chuddy&#39; grep -n &#39;chuddy&#39; 1.txt # 才知道grep可以直接获得文件的内容，然后进行分析 grep -vn &#39;chuddy&#39; 1.txt 利用中括号[]来搜寻集合字符 grep -n &#39;t[ae]st&#39; chuddy.txt grep -n &#39;[^g]oo&#39; chuddy.txt grep -n &#39;[^a-z]oo&#39; chuddy.txt grep -n &#39;[0-9]&#39; chuddy.txt grep -n &#39;[^[:lower:]]oo&#39; chuddy.txt grep -n &#39;[[:digit:]]&#39; chuddy.txt 3.行首与行尾字符(^ $) 行首(^) grep -n &#39;^the&#39; chuddy.txt grep -n &#39;^[a-z]&#39; chuddy.txt grep -n &#39;^[[:lower:]]&#39; chuddy.txt grep -n &#39;^[^a-zA-Z]&#39; chuddy.txt 行尾($) 找出行尾为‘.’的行。 grep -n &#39;\\.$&#39; chuddy.txt 找出空白行 grep -n &#39;^$&#39; chuddy.txt","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"python正则表达式","slug":"python正则表达式","date":"2018-11-08T16:36:18.000Z","updated":"2019-05-29T12:45:04.711Z","comments":true,"path":"2018/11/09/python正则表达式/","link":"","permalink":"http://yoursite.com/2018/11/09/python正则表达式/","excerpt":"Python正则表达式","text":"Python正则表达式 正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。 re 模块，它提供Perl风格的正则表达式模式。使 Python语言拥有全部的正则表达式功能。 compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 re模块re.match函数re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。 函数语法： re.match(pattern,string,flags=0) 参数说明： pattern: 匹配正则表达式 strung：要匹配的字符 flags：标志位，用于控制正则表达式的匹配方式，如是否区分大小写，多行匹配等等 匹配成功re.match方法返回一个匹配的对象，否则返回None。我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。 group(num=0) 匹配的整个表达式的字符串，group()可以一次输入多个组号,在这种情况下它将返回一个包含那些组所对值得元组 groups() 返回一个包含所有小组字符串的元组，从1到所含的小组号 #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot; matchObj = re.match( r&#39;(.*) are (.*?) .*&#39;, line, re.M|re.I) if matchObj: print &quot;matchObj.group() : &quot;, matchObj.group() print &quot;matchObj.group(1) : &quot;, matchObj.group(1) print &quot;matchObj.group(2) : &quot;, matchObj.group(2) else: print &quot;No match!!&quot; 以上实例执行结果如下： matchObj.group() : Cats are smarter than dogs matchObj.group(1) : Cats matchObj.group(2) : smarter 正则表达式修饰符 - 可选标志 re.l 使匹配对大小写不敏感 re.L 做本地化识别(locale-aware)匹配 re.M 多行匹配，影响 ^ 和 $ re.S 使.匹配包括换行在内的所有字符 re.U 根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B. re.X 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解 re.search方法re.search：扫描整个字符串并返回第一个成功的匹配。 #!/usr/bin/python # -*- coding: UTF-8 -*- import re print(re.search(&#39;www&#39;, &#39;www.runoob.com&#39;).span()) # 在起始位置匹配 print(re.search(&#39;com&#39;, &#39;www.runoob.com&#39;).span()) # 不在起始位置匹配 以上实例运行输出结果为： (0, 3) (11, 14) #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot;; searchObj = re.search( r&#39;(.*) are (.*?) .*&#39;, line, re.M|re.I) if searchObj: print &quot;searchObj.group() : &quot;, searchObj.group() print &quot;searchObj.group(1) : &quot;, searchObj.group(1) print &quot;searchObj.group(2) : &quot;, searchObj.group(2) else: print &quot;Nothing found!!&quot; 以上实例执行结果如下： searchObj.group() : Cats are smarter than dogs searchObj.group(1) : Cats searchObj.group(2) : smarter re.match与re.search的区别re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。 #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot;; matchObj = re.match( r&#39;dogs&#39;, line, re.M|re.I) if matchObj: print &quot;match --&gt; matchObj.group() : &quot;, matchObj.group() else: print &quot;No match!!&quot; matchObj = re.search( r&#39;dogs&#39;, line, re.M|re.I) if matchObj: print &quot;search --&gt; matchObj.group() : &quot;, matchObj.group() else: print &quot;No match!!&quot; 以上实例运行结果如下： No match!! search --&gt; matchObj.group() : dogs 检索和替换Python 的re模块提供了re.sub用于替换字符串中的匹配项。 语法： re.sub(pattern, repl, string, count=0, flags=0) 参数： - pattern : 正则中的模式字符串。 - repl : 替换的字符串，也可为一个函数。 - string :要被查找替换的原始字符串。 - count :模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。 例子： #!/usr/bin/python # -*- coding: UTF-8 -*- import re phone = &quot;2004-959-559 # 这是一个国外电话号码&quot; # 删除字符串中的 Python注释 num = re.sub(r&#39;#.*$&#39;, &quot;&quot;, phone) print &quot;电话号码是: &quot;, num # 删除非数字(-)的字符串 num = re.sub(r&#39;\\D&#39;, &quot;&quot;, phone) print &quot;电话号码是 : &quot;, num 以上实例执行结果如下： 电话号码是: 2004-959-559 电话号码是 : 2004959559 repl 参数是一个函数的情况 #!/usr/bin/python # -*- coding: UTF-8 -*- import re def double(a): value = int(a.group(&#39;value&#39;)) print value return str(value * 2) s = &#39;asas55da546sdsa15661&#39; print(re.sub(&#39;(?P&lt;value&gt;\\d+)&#39;, double, s)) 输出结果 55 546 15661 asas110da1092sdsa31322 [Finished in 0.1s] re.compile()函数compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。 re.compile(pattern[, flags]) 参数 - pattern: 一个字符串的正则表达式 - flags: 可选，表示匹配模式 - re.l 忽略大小写 - re.L 表示特殊字符集 \\w, \\W, \\b, \\B, \\s, \\S 依赖于当前环境 - re.M 多行模式 - re.S 即为.并且包含换行符在内的任意符号（.不包括换行符） - re.U 表示特殊字符集 \\w, \\W, \\b, \\B, \\d, \\D, \\s, \\S 依赖于 Unicode 字符属性数据库 - re.X 为了增加可读性，忽略空格和 # 后面的注释 import re pattern = re.compile(r&#39;\\d+&#39;) m = pattern.match(&#39;one12twothree34four&#39;) # 查找头部，没有匹配 print m m = pattern.match(&#39;one12twothree34four&#39;, 2, 10) # 从&#39;e&#39;的位置开始匹配，没有匹配 print m m = pattern.match(&#39;one12twothree34four&#39;, 3, 10) # 从&#39;1&#39;的位置开始匹配，正好匹配 print m 三次输出的结果为： None None &lt;_sre.SRE_Match object at 0x0340E640&gt; # 可以看出当匹配成功时返回一个 Match 对象 # 这些可以接受对象的函数输出： print m.group(0) print m.start(0) print m.end(0) print m.span(0) #输出为： 12 3 5 (3, 5) group([group1,…])方法用于获得一个或多个分组匹配的字符串，当要获取整个匹配的子串时，可直接使用 group()或者group(0)； start([group]) 方法用于获取分组匹配的子串在整个整个字符串中起始的位置(子串第一个字符的索引)，参考默认值为0； end([group]) 方法用于获取分组匹配的子串在整个整个字符串中结束的位置(子串最后一个字符的索引+1)，参考默认值为0； span([group]) 方法返回 (start(group), end(group))。 import re pattern = re.compile(r&#39;([a-z]+) ([a-z]+) ([a-z]+)&#39;, re.I) m = pattern.match(&#39;Hello World Wide Web&#39;) print m.groups() # 等价于 (m.group(1), m.group(2), ...) print m.span(1) # 返回第一个分组匹配成功的子串的索引 输出结果： (&#39;Hello&#39;, &#39;World&#39;, &#39;Wide&#39;) (0, 5) [Finished in 0.1s] findall函数在字符串中找到正则表达式所匹配的所有子串，并返回到一个列表，如果没有找到匹配的，则返回空列表。 注意：match和search是匹配一次findall匹配所有 findall(string[, pos[, endpos]]) 参数 - string 待匹配的字符串 - pos 可选参数，指定字符串的起始位置，默认为0 - endpos 可选参数，指定字符串的结束位置，默认为字符串的长度 import re findnumber = &#39;ahsd5asdj656asd645asd&#39; pattern = re.compile(r&#39;\\d+&#39;) m = pattern.findall(findnumber) n = pattern.findall(findnumber,0,10) print m print n 输出结果： [&#39;5&#39;, &#39;656&#39;, &#39;645&#39;] [&#39;5&#39;, &#39;6&#39;] [Finished in 0.1s] re.finditer和 findall类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。 re.finditer(pattern, string, flags=0) 实例 import re findnumber = &#39;ahsd5asdj656asd645asd&#39; p = re.finditer(r&#39;\\d+&#39;, findnumber) for a in p: print a.group() 输出为： 5 656 645 re.splitsplit 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下： re.split(pattern, string[, maxsplit=0, flags=0]) 参数： pattern 匹配的正则表达式 string 要匹配的字符串。 maxsplit 分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。 flags 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。 b = re.split(&#39;(\\d+)&#39;, &#39; asd, 541sad, asd5.5415&#39;) print b 输出结果 [&#39; asd, &#39;, &#39;541&#39;, &#39;sad, asd&#39;, &#39;5&#39;, &#39;.&#39;, &#39;5415&#39;, &#39;&#39;] 正则表达式对象re.RegexObjectre.compile() 返回 RegexObject 对象。 re.MatchObjectgroup() 返回被 RE 匹配的字符串。 start() 返回匹配开始的位置 end() 返回匹配结束的位置 span() 返回一个元组包含匹配 (开始,结束) 的位置 正则表达式修饰符 re.I 使匹配对大小写不敏感 re.L 做本地化识别（locale-aware）匹配 re.M 多行匹配，影响 ^ 和 $ re.S 使 . 匹配包括换行在内的所有字符 re.U 根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B. re.X 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 正则表达式模式 ^ 匹配字符串的开头 $ 匹配字符串的末尾。 . 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 […] 用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’ [^…] 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。 re* 匹配0个或多个的表达式。 re+ 匹配1个或多个的表达式。 re? 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式 re{ n} 精确匹配 n 个前面表达式。例如， o{2} 不能匹配 “Bob” 中的 “o”，但是能匹配 “food” 中的两个 o。 re{ n,} 匹配 n 个前面表达式。例如， o{2,} 不能匹配”Bob”中的”o”，但能匹配 “foooood”中的所有 o。”o{1,}” 等价于 “o+”。”o{0,}” 则等价于 “o*”。 re{ n, m} 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式 a| b 匹配a或b (re) 匹配括号内的表达式，也表示一个组 (?imx) 正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。 (?-imx) 正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。 (?: re) 类似 (…), 但是不表示一个组 (?imx: re) 在括号中使用i, m, 或 x 可选标志 (?-imx: re) 在括号中不使用i, m, 或 x 可选标志 (?#…) 注释. (?= re) 前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。 (?! re) 前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功 (?&gt; re) 匹配的独立模式，省去回溯。 \\w 匹配字母数字及下划线 \\W 匹配非字母数字及下划线 \\s 匹配任意空白字符，等价于 [\\t\\n\\r\\f]. \\S 匹配任意非空字符 \\d 匹配任意数字，等价于 [0-9]. \\D 匹配任意非数字 \\A 匹配字符串开始 \\Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。 \\z 匹配字符串结束 \\G 匹配最后匹配完成的位置。 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \\B 匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \\n, \\t, 等. 匹配一个换行符。匹配一个制表符。等 \\1…\\9 匹配第n个分组的内容。 \\10 匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"mysql 数据库的基本操作","slug":"mysql-数据库的基本操作","date":"2018-10-08T16:21:17.000Z","updated":"2019-05-29T12:33:43.168Z","comments":true,"path":"2018/10/09/mysql-数据库的基本操作/","link":"","permalink":"http://yoursite.com/2018/10/09/mysql-数据库的基本操作/","excerpt":"mysql 数据库的操作","text":"mysql 数据库的操作 一些常用的命令1.增加一个字段 alter table 表名字 add COLUMN 新列名 VARCHAR(20) DEFAULT NULL; //增加一个字段，默认为空 alter table user add COLUMN new2 VARCHAR(20) NOT NULL; //增加一个字段，默认不能为空 2.删除一个字段 alter table 表名字 DROP COLUMN 要删除的列名; //除一个字段 3.修改一个字段 alter table user MODIFY new1 VARCHAR(10); //修改一个字段的类型 alter table user CHANGE new1 new4 int; //修改一个字段的名称，此时一定要重新 //主键 alter table tabelname add new_field_id int(5) unsigned default 0 not null auto_increment ,add primary key (new_field_id); //增加一个新列 alter table t2 add d timestamp; alter table infos add ex tinyint not null default ‘0′; //删除列 alter table t2 drop column c; //重命名列 alter table t1 change a b integer; //改变列的类型 alter table t1 change b b bigint not null; alter table infos change list list tinyint not null default ‘0′; //重命名表 alter table t1 rename t2; 加索引 mysql&gt; alter table tablename change depno depno int(5) not null; mysql&gt; alter table tablename add index 索引名 (字段名1[，字段名2 …]); mysql&gt; alter table tablename add index emp_name (name); 加主关键字的索引 mysql&gt; alter table tablename add primary key(id); 加唯一限制条件的索引 mysql&gt; alter table tablename add unique emp_name2(cardnumber); 删除某个索引 mysql&gt;alter table tablename drop index emp_name; 增加字段： mysql&gt; ALTER TABLE table_name ADD field_name field_type; 修改原字段名称及类型： mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type; 删除字段： mysql&gt; ALTER TABLE table_name DROP field_name; mysql修改字段长度 alter table 表名 modify column 字段名 类型; 例如 数据库中user表 name字段是varchar(30) 可以用 alter table user modify column name varchar(50) ; 数据库的操作 net stop mysql //关闭msql net start mysql //开启mysql mysql -uroot -proot //登陆mysql show databases； //查看数据库 use test //切换到test数据库 show tables； //查看所有表 select * from user； //查看表中数据 desc user； //查看表结构 exit； //退出mysql客户端 create database user； //创建数据库 use user； //切换数据库 drop database user； //删除数据库 创建表： create table user（ id int， name varchar（30）， pass varchar（30） ); rename table user to user1; //修改表名 drop table user1 //删除表 insert into user(id) values(&quot; &quot;) select count(*) from user; 查询数据的总行数 asc是表示升序，desc表示降序 exit; 退出 select database(); 查询现在所在的库的名字； select vresion()； 查询Mysql的版本信息； select User(); 查询使用者的权限； select @@datadir; 查询Mysql的存储位置；","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]}]}